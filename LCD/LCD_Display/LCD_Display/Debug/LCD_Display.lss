
LCD_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000041e  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  0080007e  0080007e  000004d0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6f  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a2  00000000  00000000  00001997  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  00001d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027b  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025d  00000000  00000000  00002833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  8a:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteNibble>:
#define RS PA4


void WriteNibble(unsigned char nibbleToWrite)
{
	PORTA |=(1<<E);
  92:	dd 9a       	sbi	0x1b, 5	; 27
	PORTA &=0xF0;
  94:	9b b3       	in	r25, 0x1b	; 27
  96:	90 7f       	andi	r25, 0xF0	; 240
  98:	9b bb       	out	0x1b, r25	; 27
	PORTA |=(nibbleToWrite & 0xFF);
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	89 2b       	or	r24, r25
  9e:	8b bb       	out	0x1b, r24	; 27
	PORTA&=~(1<<E);	
  a0:	dd 98       	cbi	0x1b, 5	; 27
}
  a2:	08 95       	ret

000000a4 <WriteByte>:


void WriteByte(unsigned char dataToWrite)
{
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	WriteNibble(dataToWrite>>4);
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	0e 94 49 00 	call	0x92	; 0x92 <WriteNibble>
	WriteNibble(dataToWrite);
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 49 00 	call	0x92	; 0x92 <WriteNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <WriteByte+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <WriteByte+0x1a>
	_delay_us(50);
}
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <LCD_Command>:


void LCD_Command(unsigned char data)
{
	PORTA&=~(1<<RS);
  c2:	dc 98       	cbi	0x1b, 4	; 27
	WriteByte(data);
  c4:	0e 94 52 00 	call	0xa4	; 0xa4 <WriteByte>
};
  c8:	08 95       	ret

000000ca <LCD_Text>:

void LCD_Text(char *tab)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
	PORTA|=(1<<RS);
  d0:	dc 9a       	sbi	0x1b, 4	; 27
	while(*tab){
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <LCD_Text+0x1a>
{
	PORTA&=~(1<<RS);
	WriteByte(data);
};

void LCD_Text(char *tab)
  d8:	21 96       	adiw	r28, 0x01	; 1
{
	PORTA|=(1<<RS);
	while(*tab){
		WriteByte(*tab++);
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <WriteByte>
};

void LCD_Text(char *tab)
{
	PORTA|=(1<<RS);
	while(*tab){
  de:	89 91       	ld	r24, Y+
  e0:	88 23       	and	r24, r24
  e2:	d9 f7       	brne	.-10     	; 0xda <LCD_Text+0x10>
		WriteByte(*tab++);
	}
};
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <LCD_GoToXY>:
void LCD_GoToXY(unsigned char first, unsigned char second)
{
};
  ea:	08 95       	ret

000000ec <LCD_Clear>:

void LCD_Clear(void)
{
};
  ec:	08 95       	ret

000000ee <LCD_Home>:

void LCD_Home(void)
{
};
  ee:	08 95       	ret

000000f0 <send_4_zatrzask>:

void send_4_zatrzask(uint8_t val)
{
	PORTB |= 1 << PINB4;
  f0:	c4 9a       	sbi	0x18, 4	; 24

	PORTB = (PORTB & 0xF0) | (val&0x0F);
  f2:	98 b3       	in	r25, 0x18	; 24
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	90 7f       	andi	r25, 0xF0	; 240
  f8:	98 2b       	or	r25, r24
  fa:	98 bb       	out	0x18, r25	; 24
	PORTB &= ~(1 << PINB4);
  fc:	c4 98       	cbi	0x18, 4	; 24

}
  fe:	08 95       	ret

00000100 <LCD_Initalize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	81 ef       	ldi	r24, 0xF1	; 241
 102:	9b e2       	ldi	r25, 0x2B	; 43
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_Initalize+0x4>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_Initalize+0xa>
 10a:	00 00       	nop
void LCD_Initalize(void)
{
	
		_delay_ms(45);

		PORTB &= ~(1 << E);
 10c:	c5 98       	cbi	0x18, 5	; 24

		send_4_zatrzask(3);
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
 114:	81 ee       	ldi	r24, 0xE1	; 225
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Initalize+0x18>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Initalize+0x1e>
 11e:	00 00       	nop

		_delay_ms(5);

		send_4_zatrzask(3);
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
 126:	81 ee       	ldi	r24, 0xE1	; 225
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Initalize+0x2a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Initalize+0x30>
 130:	00 00       	nop

		_delay_ms(5);

		send_4_zatrzask(3);
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
 138:	81 ee       	ldi	r24, 0xE1	; 225
 13a:	94 e0       	ldi	r25, 0x04	; 4
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Initalize+0x3c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Initalize+0x42>
 142:	00 00       	nop

		_delay_ms(5);

		send_4_zatrzask(2);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>

		send_4_zatrzask(2);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
		send_4_zatrzask(8);
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
 156:	83 ef       	ldi	r24, 0xF3	; 243
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Initalize+0x5a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Initalize+0x60>
 160:	00 00       	nop
		_delay_ms(2);
		send_4_zatrzask(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
		send_4_zatrzask(8);
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
 16e:	83 ef       	ldi	r24, 0xF3	; 243
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_Initalize+0x72>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_Initalize+0x78>
 178:	00 00       	nop
		_delay_ms(2);
		send_4_zatrzask(0);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
		send_4_zatrzask(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
 186:	83 ef       	ldi	r24, 0xF3	; 243
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Initalize+0x8a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Initalize+0x90>
 190:	00 00       	nop
		_delay_ms(2);
		send_4_zatrzask(0);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
		send_4_zatrzask(6);
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	0e 94 78 00 	call	0xf0	; 0xf0 <send_4_zatrzask>
 19e:	83 ef       	ldi	r24, 0xF3	; 243
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Initalize+0xa2>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Initalize+0xa8>
 1a8:	00 00       	nop
		_delay_ms(2);
		WriteByte(0x0F);
 1aa:	8f e0       	ldi	r24, 0x0F	; 15
 1ac:	0e 94 52 00 	call	0xa4	; 0xa4 <WriteByte>


 1b0:	08 95       	ret

000001b2 <turnOnOff>:
	uint8_t col[4] ={0b11110111,0b11110011,0b11110001,0b11110000};
	int c=0;
	int k=0;
	//funkcja uruchamiana w momencie obslugi przerwania
	void turnOnOff(){
		PORTB =col[c];
 1b2:	20 91 80 00 	lds	r18, 0x0080
 1b6:	30 91 81 00 	lds	r19, 0x0081
 1ba:	f9 01       	movw	r30, r18
 1bc:	ec 59       	subi	r30, 0x9C	; 156
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
 1c2:	88 bb       	out	0x18, r24	; 24
		PORTA = digit[k];
 1c4:	80 91 7e 00 	lds	r24, 0x007E
 1c8:	90 91 7f 00 	lds	r25, 0x007F
 1cc:	fc 01       	movw	r30, r24
 1ce:	e8 59       	subi	r30, 0x98	; 152
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	40 81       	ld	r20, Z
 1d4:	4b bb       	out	0x1b, r20	; 27
		k++;
 1d6:	01 96       	adiw	r24, 0x01	; 1
		k=k%10;
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__divmodhi4>
 1e0:	90 93 7f 00 	sts	0x007F, r25
 1e4:	80 93 7e 00 	sts	0x007E, r24
		c++;
 1e8:	c9 01       	movw	r24, r18
 1ea:	01 96       	adiw	r24, 0x01	; 1
		c = c%4;
 1ec:	64 e0       	ldi	r22, 0x04	; 4
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__divmodhi4>
 1f4:	90 93 81 00 	sts	0x0081, r25
 1f8:	80 93 80 00 	sts	0x0080, r24
	}
 1fc:	08 95       	ret

000001fe <main>:
	

int main(void)
{
	
	init();
 1fe:	0e 94 c3 01 	call	0x386	; 0x386 <init>
	sei();
 202:	78 94       	sei
	DDRB = 0xFF;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
 208:	8a bb       	out	0x1a, r24	; 26
	
	
	//dodawanie taskow
	//addTask(&turnOnOff,1000);
	LCD_Initalize();
 20a:	0e 94 80 00 	call	0x100	; 0x100 <LCD_Initalize>
	LCD_Text("cos");
 20e:	80 e6       	ldi	r24, 0x60	; 96
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 65 00 	call	0xca	; 0xca <LCD_Text>
	
	//wlaczenie globalnych przerwan
	 
    while(1)
    {
		execute();
 216:	0e 94 68 01 	call	0x2d0	; 0x2d0 <execute>
 21a:	fd cf       	rjmp	.-6      	; 0x216 <main+0x18>

0000021c <addTask>:
	
	
	Task tasksTab[size]; //tablica taskow
	
	//dodawanie pojedynczego tasku wykonujacego sie cyknicznie co okreslony czas - period
	void addTask(Task_PTR t,int period){
 21c:	9c 01       	movw	r18, r24
		if(taskCount<size){
 21e:	80 91 82 00 	lds	r24, 0x0082
 222:	90 91 83 00 	lds	r25, 0x0083
 226:	8a 30       	cpi	r24, 0x0A	; 10
 228:	91 05       	cpc	r25, r1
 22a:	bc f4       	brge	.+46     	; 0x25a <addTask+0x3e>
			
			tasksTab[taskCount].toGo = period;
 22c:	fc 01       	movw	r30, r24
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	e8 1b       	sub	r30, r24
 23c:	f9 0b       	sbc	r31, r25
 23e:	ea 57       	subi	r30, 0x7A	; 122
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	62 83       	std	Z+2, r22	; 0x02
 244:	73 83       	std	Z+3, r23	; 0x03
			tasksTab[taskCount].interval = period;
 246:	64 83       	std	Z+4, r22	; 0x04
 248:	75 83       	std	Z+5, r23	; 0x05
			tasksTab[taskCount].ready = 0;
 24a:	16 82       	std	Z+6, r1	; 0x06
			tasksTab[taskCount].taskPtr = t;
 24c:	31 83       	std	Z+1, r19	; 0x01
 24e:	20 83       	st	Z, r18
			taskCount++;
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 83 00 	sts	0x0083, r25
 256:	80 93 82 00 	sts	0x0082, r24
 25a:	08 95       	ret

0000025c <addOneShot>:
		}
		
	}
	//task ktory wykonuje sie jedynie raz w momencie gdy uplynie okreslony czas - period
	void addOneShot(Task_PTR t,int period){
 25c:	9c 01       	movw	r18, r24
		if(taskCount<size){
 25e:	80 91 82 00 	lds	r24, 0x0082
 262:	90 91 83 00 	lds	r25, 0x0083
 266:	8a 30       	cpi	r24, 0x0A	; 10
 268:	91 05       	cpc	r25, r1
 26a:	bc f4       	brge	.+46     	; 0x29a <addOneShot+0x3e>
			tasksTab[taskCount].toGo = period;
 26c:	fc 01       	movw	r30, r24
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e8 1b       	sub	r30, r24
 27c:	f9 0b       	sbc	r31, r25
 27e:	ea 57       	subi	r30, 0x7A	; 122
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	73 83       	std	Z+3, r23	; 0x03
 284:	62 83       	std	Z+2, r22	; 0x02
			tasksTab[taskCount].interval = 0;
 286:	15 82       	std	Z+5, r1	; 0x05
 288:	14 82       	std	Z+4, r1	; 0x04
			tasksTab[taskCount].ready = 0;
 28a:	16 82       	std	Z+6, r1	; 0x06
			tasksTab[taskCount].taskPtr = t;
 28c:	31 83       	std	Z+1, r19	; 0x01
 28e:	20 83       	st	Z, r18
			taskCount++;
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 83 00 	sts	0x0083, r25
 296:	80 93 82 00 	sts	0x0082, r24
 29a:	08 95       	ret

0000029c <schedule>:
		}
	}
	
	//scheduler uruchamia sie podczas obslugi przerwania jego czas dzialania to 1ms
	//funkcja nadzoruje liczniki czasu jaki czekaja poszczegolne zadania
	void schedule(){
 29c:	e8 e8       	ldi	r30, 0x88	; 136
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	df 01       	movw	r26, r30
 2a2:	14 96       	adiw	r26, 0x04	; 4
 2a4:	2e ec       	ldi	r18, 0xCE	; 206
 2a6:	30 e0       	ldi	r19, 0x00	; 0
		int k=0;
		//ten ustawia taskom ready tym ktore interval maja juz 0
		for(k=0;k<size;k++){
			tasksTab[k].toGo--;
 2a8:	80 81       	ld	r24, Z
 2aa:	91 81       	ldd	r25, Z+1	; 0x01
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	91 83       	std	Z+1, r25	; 0x01
 2b0:	80 83       	st	Z, r24
			if(tasksTab[k].toGo==0){
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	39 f4       	brne	.+14     	; 0x2c4 <schedule+0x28>
				tasksTab[k].ready++;
 2b6:	8c 91       	ld	r24, X
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	8c 93       	st	X, r24
				tasksTab[k].toGo = tasksTab[k].interval;
 2bc:	82 81       	ldd	r24, Z+2	; 0x02
 2be:	93 81       	ldd	r25, Z+3	; 0x03
 2c0:	91 83       	std	Z+1, r25	; 0x01
 2c2:	80 83       	st	Z, r24
 2c4:	37 96       	adiw	r30, 0x07	; 7
 2c6:	17 96       	adiw	r26, 0x07	; 7
	//scheduler uruchamia sie podczas obslugi przerwania jego czas dzialania to 1ms
	//funkcja nadzoruje liczniki czasu jaki czekaja poszczegolne zadania
	void schedule(){
		int k=0;
		//ten ustawia taskom ready tym ktore interval maja juz 0
		for(k=0;k<size;k++){
 2c8:	e2 17       	cp	r30, r18
 2ca:	f3 07       	cpc	r31, r19
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <schedule+0xc>
				tasksTab[k].ready++;
				tasksTab[k].toGo = tasksTab[k].interval;
			}
		}
		
	}
 2ce:	08 95       	ret

000002d0 <execute>:
	
	//egzekutor ktory uruchamia poszczegolne zadania
	void execute(){
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
		int cur = 0;
		for(cur=0;cur<size;cur++){
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
			if(tasksTab[cur].ready>0 && tasksTab[cur].interval>=0){
 2ec:	06 e8       	ldi	r16, 0x86	; 134
 2ee:	10 e0       	ldi	r17, 0x00	; 0
				tasksTab[cur].toGo = tasksTab[cur].interval;
				tasksTab[cur].taskPtr();
				tasksTab[cur].ready--;
				cur = 0;
				//ustawianie interwalu na -1 dla oneShotTask aby nie uruchamiac go ponownie
				if(tasksTab[cur].interval == 0){
 2f0:	ee 24       	eor	r14, r14
 2f2:	ff 24       	eor	r15, r15
 2f4:	68 94       	set
 2f6:	e2 f8       	bld	r14, 2
 2f8:	e0 0e       	add	r14, r16
 2fa:	f1 1e       	adc	r15, r17
	}
	
	//egzekutor ktory uruchamia poszczegolne zadania
	void execute(){
		int cur = 0;
		for(cur=0;cur<size;cur++){
 2fc:	cc 24       	eor	r12, r12
 2fe:	dd 24       	eor	r13, r13
 300:	c3 94       	inc	r12
				tasksTab[cur].taskPtr();
				tasksTab[cur].ready--;
				cur = 0;
				//ustawianie interwalu na -1 dla oneShotTask aby nie uruchamiac go ponownie
				if(tasksTab[cur].interval == 0){
					tasksTab[cur].interval = -1;
 302:	0f 2e       	mov	r0, r31
 304:	fa e8       	ldi	r31, 0x8A	; 138
 306:	af 2e       	mov	r10, r31
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	bf 2e       	mov	r11, r31
 30c:	f0 2d       	mov	r31, r0
 30e:	88 24       	eor	r8, r8
 310:	8a 94       	dec	r8
 312:	98 2c       	mov	r9, r8
	
	//egzekutor ktory uruchamia poszczegolne zadania
	void execute(){
		int cur = 0;
		for(cur=0;cur<size;cur++){
			if(tasksTab[cur].ready>0 && tasksTab[cur].interval>=0){
 314:	c9 01       	movw	r24, r18
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	82 1b       	sub	r24, r18
 324:	93 0b       	sbc	r25, r19
 326:	80 0f       	add	r24, r16
 328:	91 1f       	adc	r25, r17
 32a:	fc 01       	movw	r30, r24
 32c:	86 81       	ldd	r24, Z+6	; 0x06
 32e:	88 23       	and	r24, r24
 330:	a9 f0       	breq	.+42     	; 0x35c <execute+0x8c>
				tasksTab[cur].toGo = tasksTab[cur].interval;
 332:	ef 01       	movw	r28, r30
 334:	84 81       	ldd	r24, Z+4	; 0x04
 336:	95 81       	ldd	r25, Z+5	; 0x05
 338:	93 83       	std	Z+3, r25	; 0x03
 33a:	82 83       	std	Z+2, r24	; 0x02
				tasksTab[cur].taskPtr();
 33c:	01 90       	ld	r0, Z+
 33e:	f0 81       	ld	r31, Z
 340:	e0 2d       	mov	r30, r0
 342:	09 95       	icall
				tasksTab[cur].ready--;
 344:	8e 81       	ldd	r24, Y+6	; 0x06
 346:	81 50       	subi	r24, 0x01	; 1
 348:	8e 83       	std	Y+6, r24	; 0x06
				cur = 0;
				//ustawianie interwalu na -1 dla oneShotTask aby nie uruchamiac go ponownie
				if(tasksTab[cur].interval == 0){
 34a:	f7 01       	movw	r30, r14
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	51 f4       	brne	.+20     	; 0x368 <execute+0x98>
					tasksTab[cur].interval = -1;
 354:	f5 01       	movw	r30, r10
 356:	91 82       	std	Z+1, r9	; 0x01
 358:	80 82       	st	Z, r8
 35a:	06 c0       	rjmp	.+12     	; 0x368 <execute+0x98>
	}
	
	//egzekutor ktory uruchamia poszczegolne zadania
	void execute(){
		int cur = 0;
		for(cur=0;cur<size;cur++){
 35c:	2f 5f       	subi	r18, 0xFF	; 255
 35e:	3f 4f       	sbci	r19, 0xFF	; 255
 360:	2a 30       	cpi	r18, 0x0A	; 10
 362:	31 05       	cpc	r19, r1
 364:	bc f2       	brlt	.-82     	; 0x314 <execute+0x44>
 366:	02 c0       	rjmp	.+4      	; 0x36c <execute+0x9c>
 368:	96 01       	movw	r18, r12
 36a:	d4 cf       	rjmp	.-88     	; 0x314 <execute+0x44>
				if(tasksTab[cur].interval == 0){
					tasksTab[cur].interval = -1;
				}
			}
		}
	}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	bf 90       	pop	r11
 37e:	af 90       	pop	r10
 380:	9f 90       	pop	r9
 382:	8f 90       	pop	r8
 384:	08 95       	ret

00000386 <init>:
	
	
	//inicjalizacja licznik
	void init(){
		
		TCCR0 |= (0<<WGM00) | (1<<WGM01); //ustawianie flag
 386:	83 b7       	in	r24, 0x33	; 51
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(0<<COM00) | (0<<COM01); // ustawiamy flagi dla TCCRO
 38c:	83 b7       	in	r24, 0x33	; 51
 38e:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<CS00) | (1<<CS01) | (0<<CS02);
 390:	83 b7       	in	r24, 0x33	; 51
 392:	83 60       	ori	r24, 0x03	; 3
 394:	83 bf       	out	0x33, r24	; 51
		TIMSK |=(1<<OCIE0);
 396:	89 b7       	in	r24, 0x39	; 57
 398:	82 60       	ori	r24, 0x02	; 2
 39a:	89 bf       	out	0x39, r24	; 57
		OCR0 = 250;
 39c:	8a ef       	ldi	r24, 0xFA	; 250
 39e:	8c bf       	out	0x3c, r24	; 60
 3a0:	e8 e8       	ldi	r30, 0x88	; 136
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	df 01       	movw	r26, r30
 3a6:	14 96       	adiw	r26, 0x04	; 4
		}
	}
	
	
	//inicjalizacja licznik
	void init(){
 3a8:	8e ec       	ldi	r24, 0xCE	; 206
 3aa:	90 e0       	ldi	r25, 0x00	; 0
		TCCR0 |=(1<<CS00) | (1<<CS01) | (0<<CS02);
		TIMSK |=(1<<OCIE0);
		OCR0 = 250;
		int i=0;
		for(i=0;i<size;i++){
			tasksTab[i].interval = 0;
 3ac:	13 82       	std	Z+3, r1	; 0x03
 3ae:	12 82       	std	Z+2, r1	; 0x02
			tasksTab[i].toGo = 0;
 3b0:	11 82       	std	Z+1, r1	; 0x01
 3b2:	10 82       	st	Z, r1
			tasksTab[i].ready=0;
 3b4:	1c 92       	st	X, r1
 3b6:	37 96       	adiw	r30, 0x07	; 7
 3b8:	17 96       	adiw	r26, 0x07	; 7
		TCCR0 |=(0<<COM00) | (0<<COM01); // ustawiamy flagi dla TCCRO
		TCCR0 |=(1<<CS00) | (1<<CS01) | (0<<CS02);
		TIMSK |=(1<<OCIE0);
		OCR0 = 250;
		int i=0;
		for(i=0;i<size;i++){
 3ba:	e8 17       	cp	r30, r24
 3bc:	f9 07       	cpc	r31, r25
 3be:	b1 f7       	brne	.-20     	; 0x3ac <init+0x26>
			tasksTab[i].interval = 0;
			tasksTab[i].toGo = 0;
			tasksTab[i].ready=0;
		}
	}
 3c0:	08 95       	ret

000003c2 <ISR>:
	
		//obsluga przerwan przerwania
		int ISR(TIMER0_COMP_vect){
			schedule();
 3c2:	0e 94 4e 01 	call	0x29c	; 0x29c <schedule>
			return 0;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	08 95       	ret

000003cc <__divmodhi4>:
 3cc:	97 fb       	bst	r25, 7
 3ce:	09 2e       	mov	r0, r25
 3d0:	07 26       	eor	r0, r23
 3d2:	0a d0       	rcall	.+20     	; 0x3e8 <__divmodhi4_neg1>
 3d4:	77 fd       	sbrc	r23, 7
 3d6:	04 d0       	rcall	.+8      	; 0x3e0 <__divmodhi4_neg2>
 3d8:	0c d0       	rcall	.+24     	; 0x3f2 <__udivmodhi4>
 3da:	06 d0       	rcall	.+12     	; 0x3e8 <__divmodhi4_neg1>
 3dc:	00 20       	and	r0, r0
 3de:	1a f4       	brpl	.+6      	; 0x3e6 <__divmodhi4_exit>

000003e0 <__divmodhi4_neg2>:
 3e0:	70 95       	com	r23
 3e2:	61 95       	neg	r22
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255

000003e6 <__divmodhi4_exit>:
 3e6:	08 95       	ret

000003e8 <__divmodhi4_neg1>:
 3e8:	f6 f7       	brtc	.-4      	; 0x3e6 <__divmodhi4_exit>
 3ea:	90 95       	com	r25
 3ec:	81 95       	neg	r24
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	08 95       	ret

000003f2 <__udivmodhi4>:
 3f2:	aa 1b       	sub	r26, r26
 3f4:	bb 1b       	sub	r27, r27
 3f6:	51 e1       	ldi	r21, 0x11	; 17
 3f8:	07 c0       	rjmp	.+14     	; 0x408 <__udivmodhi4_ep>

000003fa <__udivmodhi4_loop>:
 3fa:	aa 1f       	adc	r26, r26
 3fc:	bb 1f       	adc	r27, r27
 3fe:	a6 17       	cp	r26, r22
 400:	b7 07       	cpc	r27, r23
 402:	10 f0       	brcs	.+4      	; 0x408 <__udivmodhi4_ep>
 404:	a6 1b       	sub	r26, r22
 406:	b7 0b       	sbc	r27, r23

00000408 <__udivmodhi4_ep>:
 408:	88 1f       	adc	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	5a 95       	dec	r21
 40e:	a9 f7       	brne	.-22     	; 0x3fa <__udivmodhi4_loop>
 410:	80 95       	com	r24
 412:	90 95       	com	r25
 414:	bc 01       	movw	r22, r24
 416:	cd 01       	movw	r24, r26
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
