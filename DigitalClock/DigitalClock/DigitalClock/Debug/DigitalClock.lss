
DigitalClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000fe2  00001076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00800080  00800080  00001096  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000017fb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008d5  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000382  00000000  00000000  0000220f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005f9  00000000  00000000  00002591  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a0  00000000  00000000  00002b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000040a  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000728  00000000  00000000  00003336  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00003a5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <main>
  8a:	0c 94 ef 07 	jmp	0xfde	; 0xfde <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <displayClock>:
	int one = minutes % 10;
	int HrsDec = hours / 10;
	int HrsOne = hours % 10;
	if(j == 0){
		PORTB = Column[0];
		PORTA = Digits[one];
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	90 91 61 00 	lds	r25, 0x0061
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 05       	cpc	r25, r1
		if(highlight1 == 0){ //jesli kol1 nie ma byc podswietlana to przejdz do nastepnej, jesli ma byc to zostaw ta sama kolumne
  a6:	11 f4       	brne	.+4      	; 0xac <displayClock+0x1a>
  a8:	0e 94 a0 03 	call	0x740	; 0x740 <displayMinutesAndSecondsWithChangingValueMode>
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	90 91 61 00 	lds	r25, 0x0061
			j++;
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	11 f4       	brne	.+4      	; 0xbc <displayClock+0x2a>
  b8:	0e 94 a1 02 	call	0x542	; 0x542 <displayHoursAndMinutesWithChangingValueMode>
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <getKeyNumber>:
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
		}
	}
	else if(j == 1){
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	28 97       	sbiw	r28, 0x08	; 8
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
		PORTB = Column[1];
  d6:	1a 82       	std	Y+2, r1	; 0x02
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	85 e3       	ldi	r24, 0x35	; 53
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1
		PORTA = Digits[dec];
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2f e0       	ldi	r18, 0x0F	; 15
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	85 e3       	ldi	r24, 0x35	; 53
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	20 ef       	ldi	r18, 0xF0	; 240
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
		if(highlight2 == 0){ 
  f6:	1a 82       	std	Y+2, r1	; 0x02
  f8:	19 82       	std	Y+1, r1	; 0x01
  fa:	05 c0       	rjmp	.+10     	; 0x106 <getKeyNumber+0x44>
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	9a 83       	std	Y+2, r25	; 0x02
			j++;
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	91 05       	cpc	r25, r1
 10e:	b4 f3       	brlt	.-20     	; 0xfc <getKeyNumber+0x3a>
 110:	83 e3       	ldi	r24, 0x33	; 51
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	90 81       	ld	r25, Z
		}
	}
	else if(j == 2){
 118:	80 ef       	ldi	r24, 0xF0	; 240
 11a:	89 27       	eor	r24, r25
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 bf 04 	call	0x97e	; 0x97e <findPosition>
 124:	04 97       	sbiw	r24, 0x04	; 4
		PORTB = Column[2];
 126:	9e 83       	std	Y+6, r25	; 0x06
 128:	8d 83       	std	Y+5, r24	; 0x05
 12a:	85 e3       	ldi	r24, 0x35	; 53
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	10 82       	st	Z, r1
		PORTA = Digits[HrsOne];
 132:	84 e3       	ldi	r24, 0x34	; 52
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	20 ef       	ldi	r18, 0xF0	; 240
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
 13c:	85 e3       	ldi	r24, 0x35	; 53
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2f e0       	ldi	r18, 0x0F	; 15
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
		if(highlight3 == 0){ 
 146:	1a 82       	std	Y+2, r1	; 0x02
 148:	19 82       	std	Y+1, r1	; 0x01
 14a:	05 c0       	rjmp	.+10     	; 0x156 <getKeyNumber+0x94>
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	01 96       	adiw	r24, 0x01	; 1
			j++;
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	91 05       	cpc	r25, r1
 15e:	b4 f3       	brlt	.-20     	; 0x14c <getKeyNumber+0x8a>
 160:	83 e3       	ldi	r24, 0x33	; 51
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
		}
	}
	else if(j == 3){
 166:	90 81       	ld	r25, Z
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	89 27       	eor	r24, r25
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 bf 04 	call	0x97e	; 0x97e <findPosition>
		PORTB = Column[3];
 174:	98 87       	std	Y+8, r25	; 0x08
 176:	8f 83       	std	Y+7, r24	; 0x07
 178:	8d 81       	ldd	r24, Y+5	; 0x05
 17a:	9e 81       	ldd	r25, Y+6	; 0x06
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	9c 01       	movw	r18, r24
		PORTA = Digits[HrsDec];
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	8f 81       	ldd	r24, Y+7	; 0x07
 18a:	98 85       	ldd	r25, Y+8	; 0x08
 18c:	82 0f       	add	r24, r18
 18e:	93 1f       	adc	r25, r19
 190:	9c 83       	std	Y+4, r25	; 0x04
 192:	8b 83       	std	Y+3, r24	; 0x03
		if(highlight4 == 0){ 
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	9c 81       	ldd	r25, Y+4	; 0x04
 198:	99 23       	and	r25, r25
 19a:	2c f0       	brlt	.+10     	; 0x1a6 <getKeyNumber+0xe4>
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	9c 81       	ldd	r25, Y+4	; 0x04
			j++;
 1a0:	85 30       	cpi	r24, 0x05	; 5
 1a2:	91 05       	cpc	r25, r1
 1a4:	14 f0       	brlt	.+4      	; 0x1aa <getKeyNumber+0xe8>
 1a6:	1c 82       	std	Y+4, r1	; 0x04
 1a8:	1b 82       	std	Y+3, r1	; 0x03
 1aa:	8a e3       	ldi	r24, 0x3A	; 58
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	fc 01       	movw	r30, r24
		}
	}
	j = j % 4;
 1b2:	20 83       	st	Z, r18
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	9c 81       	ldd	r25, Y+4	; 0x04
 1b8:	90 93 81 00 	sts	0x0081, r25
 1bc:	80 93 80 00 	sts	0x0080, r24
 1c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <handleChangeMode>
 1c4:	28 96       	adiw	r28, 0x08	; 8
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
 1d0:	df 91       	pop	r29
}
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <handleChangeMode>:
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	20 91 80 00 	lds	r18, 0x0080
 1e2:	30 91 81 00 	lds	r19, 0x0081
	keyPressed = liczba;
	handleChangeMode();
}

void handleChangeMode(){
	if(keyPressed == CHANGE_MODE_BUTTON){
 1e6:	80 91 7c 00 	lds	r24, 0x007C
 1ea:	90 91 7d 00 	lds	r25, 0x007D
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	b1 f4       	brne	.+44     	; 0x220 <handleChangeMode+0x4a>
		changeMode++;
 1f4:	80 91 88 00 	lds	r24, 0x0088
 1f8:	90 91 89 00 	lds	r25, 0x0089
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 89 00 	sts	0x0089, r25
 202:	80 93 88 00 	sts	0x0088, r24
		changeMode = changeMode % 3;
 206:	80 91 88 00 	lds	r24, 0x0088
 20a:	90 91 89 00 	lds	r25, 0x0089
 20e:	23 e0       	ldi	r18, 0x03	; 3
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 218:	90 93 89 00 	sts	0x0089, r25
 21c:	80 93 88 00 	sts	0x0088, r24
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <handleAddValue>:

void handleAddValue(){
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
	stopClock = 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 87 00 	sts	0x0087, r25
 236:	80 93 86 00 	sts	0x0086, r24
	if(displayMode == HOURS && changeMode == RIGHT_COLS){
 23a:	20 91 60 00 	lds	r18, 0x0060
 23e:	30 91 61 00 	lds	r19, 0x0061
 242:	80 91 72 00 	lds	r24, 0x0072
 246:	90 91 73 00 	lds	r25, 0x0073
 24a:	28 17       	cp	r18, r24
 24c:	39 07       	cpc	r19, r25
 24e:	99 f5       	brne	.+102    	; 0x2b6 <handleAddValue+0x90>
 250:	20 91 88 00 	lds	r18, 0x0088
 254:	30 91 89 00 	lds	r19, 0x0089
 258:	80 91 76 00 	lds	r24, 0x0076
 25c:	90 91 77 00 	lds	r25, 0x0077
 260:	28 17       	cp	r18, r24
 262:	39 07       	cpc	r19, r25
 264:	41 f5       	brne	.+80     	; 0x2b6 <handleAddValue+0x90>
		if(keyPressed == CHANGE_VALUE_BUTTON){
 266:	20 91 80 00 	lds	r18, 0x0080
 26a:	30 91 81 00 	lds	r19, 0x0081
 26e:	80 91 7e 00 	lds	r24, 0x007E
 272:	90 91 7f 00 	lds	r25, 0x007F
 276:	28 17       	cp	r18, r24
 278:	39 07       	cpc	r19, r25
 27a:	e9 f4       	brne	.+58     	; 0x2b6 <handleAddValue+0x90>
			minutes++;
 27c:	80 91 84 00 	lds	r24, 0x0084
 280:	90 91 85 00 	lds	r25, 0x0085
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 85 00 	sts	0x0085, r25
 28a:	80 93 84 00 	sts	0x0084, r24
			if(minutes > 59){
 28e:	80 91 84 00 	lds	r24, 0x0084
 292:	90 91 85 00 	lds	r25, 0x0085
 296:	8c 33       	cpi	r24, 0x3C	; 60
 298:	91 05       	cpc	r25, r1
 29a:	6c f0       	brlt	.+26     	; 0x2b6 <handleAddValue+0x90>
				minutes = minutes % 60;
 29c:	80 91 84 00 	lds	r24, 0x0084
 2a0:	90 91 85 00 	lds	r25, 0x0085
 2a4:	2c e3       	ldi	r18, 0x3C	; 60
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 2ae:	90 93 85 00 	sts	0x0085, r25
 2b2:	80 93 84 00 	sts	0x0084, r24
			}
		}
	}
	if(displayMode == HOURS && changeMode == LEFT_COLS){
 2b6:	20 91 60 00 	lds	r18, 0x0060
 2ba:	30 91 61 00 	lds	r19, 0x0061
 2be:	80 91 72 00 	lds	r24, 0x0072
 2c2:	90 91 73 00 	lds	r25, 0x0073
 2c6:	28 17       	cp	r18, r24
 2c8:	39 07       	cpc	r19, r25
 2ca:	99 f5       	brne	.+102    	; 0x332 <handleAddValue+0x10c>
 2cc:	20 91 88 00 	lds	r18, 0x0088
 2d0:	30 91 89 00 	lds	r19, 0x0089
 2d4:	80 91 78 00 	lds	r24, 0x0078
 2d8:	90 91 79 00 	lds	r25, 0x0079
 2dc:	28 17       	cp	r18, r24
 2de:	39 07       	cpc	r19, r25
 2e0:	41 f5       	brne	.+80     	; 0x332 <handleAddValue+0x10c>
		if(keyPressed == CHANGE_VALUE_BUTTON){
 2e2:	20 91 80 00 	lds	r18, 0x0080
 2e6:	30 91 81 00 	lds	r19, 0x0081
 2ea:	80 91 7e 00 	lds	r24, 0x007E
 2ee:	90 91 7f 00 	lds	r25, 0x007F
 2f2:	28 17       	cp	r18, r24
 2f4:	39 07       	cpc	r19, r25
 2f6:	e9 f4       	brne	.+58     	; 0x332 <handleAddValue+0x10c>
		hours++;
 2f8:	80 91 62 00 	lds	r24, 0x0062
 2fc:	90 91 63 00 	lds	r25, 0x0063
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	90 93 63 00 	sts	0x0063, r25
 306:	80 93 62 00 	sts	0x0062, r24
		if(hours > 23){
 30a:	80 91 62 00 	lds	r24, 0x0062
 30e:	90 91 63 00 	lds	r25, 0x0063
 312:	88 31       	cpi	r24, 0x18	; 24
 314:	91 05       	cpc	r25, r1
 316:	6c f0       	brlt	.+26     	; 0x332 <handleAddValue+0x10c>
			hours = hours % 24;
 318:	80 91 62 00 	lds	r24, 0x0062
 31c:	90 91 63 00 	lds	r25, 0x0063
 320:	28 e1       	ldi	r18, 0x18	; 24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 32a:	90 93 63 00 	sts	0x0063, r25
 32e:	80 93 62 00 	sts	0x0062, r24
		}
		}
	}
	if(displayMode == MINUTES && changeMode == RIGHT_COLS){
 332:	20 91 60 00 	lds	r18, 0x0060
 336:	30 91 61 00 	lds	r19, 0x0061
 33a:	80 91 74 00 	lds	r24, 0x0074
 33e:	90 91 75 00 	lds	r25, 0x0075
 342:	28 17       	cp	r18, r24
 344:	39 07       	cpc	r19, r25
 346:	99 f5       	brne	.+102    	; 0x3ae <handleAddValue+0x188>
 348:	20 91 88 00 	lds	r18, 0x0088
 34c:	30 91 89 00 	lds	r19, 0x0089
 350:	80 91 76 00 	lds	r24, 0x0076
 354:	90 91 77 00 	lds	r25, 0x0077
 358:	28 17       	cp	r18, r24
 35a:	39 07       	cpc	r19, r25
 35c:	41 f5       	brne	.+80     	; 0x3ae <handleAddValue+0x188>
		if(keyPressed == CHANGE_VALUE_BUTTON){
 35e:	20 91 80 00 	lds	r18, 0x0080
 362:	30 91 81 00 	lds	r19, 0x0081
 366:	80 91 7e 00 	lds	r24, 0x007E
 36a:	90 91 7f 00 	lds	r25, 0x007F
 36e:	28 17       	cp	r18, r24
 370:	39 07       	cpc	r19, r25
 372:	e9 f4       	brne	.+58     	; 0x3ae <handleAddValue+0x188>
			seconds++;
 374:	80 91 82 00 	lds	r24, 0x0082
 378:	90 91 83 00 	lds	r25, 0x0083
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	90 93 83 00 	sts	0x0083, r25
 382:	80 93 82 00 	sts	0x0082, r24
			if(seconds > 59){
 386:	80 91 82 00 	lds	r24, 0x0082
 38a:	90 91 83 00 	lds	r25, 0x0083
 38e:	8c 33       	cpi	r24, 0x3C	; 60
 390:	91 05       	cpc	r25, r1
 392:	6c f0       	brlt	.+26     	; 0x3ae <handleAddValue+0x188>
				seconds = seconds % 60;
 394:	80 91 82 00 	lds	r24, 0x0082
 398:	90 91 83 00 	lds	r25, 0x0083
 39c:	2c e3       	ldi	r18, 0x3C	; 60
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 3a6:	90 93 83 00 	sts	0x0083, r25
 3aa:	80 93 82 00 	sts	0x0082, r24
			}
		}
	}
	if(displayMode == MINUTES && changeMode == LEFT_COLS){
 3ae:	20 91 60 00 	lds	r18, 0x0060
 3b2:	30 91 61 00 	lds	r19, 0x0061
 3b6:	80 91 74 00 	lds	r24, 0x0074
 3ba:	90 91 75 00 	lds	r25, 0x0075
 3be:	28 17       	cp	r18, r24
 3c0:	39 07       	cpc	r19, r25
 3c2:	99 f5       	brne	.+102    	; 0x42a <handleAddValue+0x204>
 3c4:	20 91 88 00 	lds	r18, 0x0088
 3c8:	30 91 89 00 	lds	r19, 0x0089
 3cc:	80 91 78 00 	lds	r24, 0x0078
 3d0:	90 91 79 00 	lds	r25, 0x0079
 3d4:	28 17       	cp	r18, r24
 3d6:	39 07       	cpc	r19, r25
 3d8:	41 f5       	brne	.+80     	; 0x42a <handleAddValue+0x204>
			if(keyPressed == CHANGE_VALUE_BUTTON){
 3da:	20 91 80 00 	lds	r18, 0x0080
 3de:	30 91 81 00 	lds	r19, 0x0081
 3e2:	80 91 7e 00 	lds	r24, 0x007E
 3e6:	90 91 7f 00 	lds	r25, 0x007F
 3ea:	28 17       	cp	r18, r24
 3ec:	39 07       	cpc	r19, r25
 3ee:	e9 f4       	brne	.+58     	; 0x42a <handleAddValue+0x204>
				minutes++;
 3f0:	80 91 84 00 	lds	r24, 0x0084
 3f4:	90 91 85 00 	lds	r25, 0x0085
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	90 93 85 00 	sts	0x0085, r25
 3fe:	80 93 84 00 	sts	0x0084, r24
				if(minutes > 59){
 402:	80 91 84 00 	lds	r24, 0x0084
 406:	90 91 85 00 	lds	r25, 0x0085
 40a:	8c 33       	cpi	r24, 0x3C	; 60
 40c:	91 05       	cpc	r25, r1
 40e:	6c f0       	brlt	.+26     	; 0x42a <handleAddValue+0x204>
					minutes = minutes % 60;
 410:	80 91 84 00 	lds	r24, 0x0084
 414:	90 91 85 00 	lds	r25, 0x0085
 418:	2c e3       	ldi	r18, 0x3C	; 60
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 422:	90 93 85 00 	sts	0x0085, r25
 426:	80 93 84 00 	sts	0x0084, r24
				}
			}
	}
		stopClock = 0; //wznow prace zegara
 42a:	10 92 87 00 	sts	0x0087, r1
 42e:	10 92 86 00 	sts	0x0086, r1
}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <changeDisplayMode>:

void changeDisplayMode(){
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
	if(keyPressed == 1){
 440:	80 91 80 00 	lds	r24, 0x0080
 444:	90 91 81 00 	lds	r25, 0x0081
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	91 05       	cpc	r25, r1
 44c:	c9 f4       	brne	.+50     	; 0x480 <changeDisplayMode+0x48>
		displayMode++;
 44e:	80 91 60 00 	lds	r24, 0x0060
 452:	90 91 61 00 	lds	r25, 0x0061
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	90 93 61 00 	sts	0x0061, r25
 45c:	80 93 60 00 	sts	0x0060, r24
		displayMode = displayMode % 2;
 460:	80 91 60 00 	lds	r24, 0x0060
 464:	90 91 61 00 	lds	r25, 0x0061
 468:	81 70       	andi	r24, 0x01	; 1
 46a:	90 78       	andi	r25, 0x80	; 128
 46c:	99 23       	and	r25, r25
 46e:	24 f4       	brge	.+8      	; 0x478 <changeDisplayMode+0x40>
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	8e 6f       	ori	r24, 0xFE	; 254
 474:	9f 6f       	ori	r25, 0xFF	; 255
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	90 93 61 00 	sts	0x0061, r25
 47c:	80 93 60 00 	sts	0x0060, r24
	}
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <manageClock>:
	j = j % 4;
}



void manageClock(){
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
	if(stopClock == 0){ //jesli zegar ma chodzic to dodaj sekunde
 48e:	80 91 86 00 	lds	r24, 0x0086
 492:	90 91 87 00 	lds	r25, 0x0087
 496:	00 97       	sbiw	r24, 0x00	; 0
 498:	09 f0       	breq	.+2      	; 0x49c <manageClock+0x16>
 49a:	50 c0       	rjmp	.+160    	; 0x53c <manageClock+0xb6>
		seconds++;
 49c:	80 91 82 00 	lds	r24, 0x0082
 4a0:	90 91 83 00 	lds	r25, 0x0083
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	90 93 83 00 	sts	0x0083, r25
 4aa:	80 93 82 00 	sts	0x0082, r24
		if(seconds > 59){
 4ae:	80 91 82 00 	lds	r24, 0x0082
 4b2:	90 91 83 00 	lds	r25, 0x0083
 4b6:	8c 33       	cpi	r24, 0x3C	; 60
 4b8:	91 05       	cpc	r25, r1
 4ba:	4c f0       	brlt	.+18     	; 0x4ce <manageClock+0x48>
			minutes++;			
 4bc:	80 91 84 00 	lds	r24, 0x0084
 4c0:	90 91 85 00 	lds	r25, 0x0085
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	90 93 85 00 	sts	0x0085, r25
 4ca:	80 93 84 00 	sts	0x0084, r24
		}
		seconds = seconds % 60;
 4ce:	80 91 82 00 	lds	r24, 0x0082
 4d2:	90 91 83 00 	lds	r25, 0x0083
 4d6:	2c e3       	ldi	r18, 0x3C	; 60
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	b9 01       	movw	r22, r18
 4dc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 4e0:	90 93 83 00 	sts	0x0083, r25
 4e4:	80 93 82 00 	sts	0x0082, r24
		if(minutes > 59){
 4e8:	80 91 84 00 	lds	r24, 0x0084
 4ec:	90 91 85 00 	lds	r25, 0x0085
 4f0:	8c 33       	cpi	r24, 0x3C	; 60
 4f2:	91 05       	cpc	r25, r1
 4f4:	4c f0       	brlt	.+18     	; 0x508 <manageClock+0x82>
			hours++;			
 4f6:	80 91 62 00 	lds	r24, 0x0062
 4fa:	90 91 63 00 	lds	r25, 0x0063
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	90 93 63 00 	sts	0x0063, r25
 504:	80 93 62 00 	sts	0x0062, r24
		}
		minutes = minutes % 60;
 508:	80 91 84 00 	lds	r24, 0x0084
 50c:	90 91 85 00 	lds	r25, 0x0085
 510:	2c e3       	ldi	r18, 0x3C	; 60
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 51a:	90 93 85 00 	sts	0x0085, r25
 51e:	80 93 84 00 	sts	0x0084, r24
		//if(hours > 23){
			hours = hours % 24;
 522:	80 91 62 00 	lds	r24, 0x0062
 526:	90 91 63 00 	lds	r25, 0x0063
 52a:	28 e1       	ldi	r18, 0x18	; 24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	b9 01       	movw	r22, r18
 530:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 534:	90 93 63 00 	sts	0x0063, r25
 538:	80 93 62 00 	sts	0x0062, r24
		//}				
	}
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <displayHoursAndMinutesWithChangingValueMode>:

void displayHoursAndMinutesWithChangingValueMode(){
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	28 97       	sbiw	r28, 0x08	; 8
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
	PORTB = 0xFF;
 556:	88 e3       	ldi	r24, 0x38	; 56
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	2f ef       	ldi	r18, 0xFF	; 255
 55c:	fc 01       	movw	r30, r24
 55e:	20 83       	st	Z, r18
	int dec = minutes / 10;
 560:	80 91 84 00 	lds	r24, 0x0084
 564:	90 91 85 00 	lds	r25, 0x0085
 568:	2a e0       	ldi	r18, 0x0A	; 10
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	b9 01       	movw	r22, r18
 56e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 572:	9b 01       	movw	r18, r22
 574:	3a 83       	std	Y+2, r19	; 0x02
 576:	29 83       	std	Y+1, r18	; 0x01
	int one = minutes % 10;
 578:	80 91 84 00 	lds	r24, 0x0084
 57c:	90 91 85 00 	lds	r25, 0x0085
 580:	2a e0       	ldi	r18, 0x0A	; 10
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	b9 01       	movw	r22, r18
 586:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 58a:	9c 83       	std	Y+4, r25	; 0x04
 58c:	8b 83       	std	Y+3, r24	; 0x03
	int HrsDec = hours / 10;
 58e:	80 91 62 00 	lds	r24, 0x0062
 592:	90 91 63 00 	lds	r25, 0x0063
 596:	2a e0       	ldi	r18, 0x0A	; 10
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 5a0:	9b 01       	movw	r18, r22
 5a2:	3e 83       	std	Y+6, r19	; 0x06
 5a4:	2d 83       	std	Y+5, r18	; 0x05
	int HrsOne = hours % 10;
 5a6:	80 91 62 00 	lds	r24, 0x0062
 5aa:	90 91 63 00 	lds	r25, 0x0063
 5ae:	2a e0       	ldi	r18, 0x0A	; 10
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	b9 01       	movw	r22, r18
 5b4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 5b8:	98 87       	std	Y+8, r25	; 0x08
 5ba:	8f 83       	std	Y+7, r24	; 0x07
	if(j == 0){
 5bc:	80 91 8a 00 	lds	r24, 0x008A
 5c0:	90 91 8b 00 	lds	r25, 0x008B
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	89 f4       	brne	.+34     	; 0x5ea <displayHoursAndMinutesWithChangingValueMode+0xa8>
		PORTB = Column[0];
 5c8:	88 e3       	ldi	r24, 0x38	; 56
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	20 91 6e 00 	lds	r18, 0x006E
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
		PORTA = Digits[one];
 5d4:	8b e3       	ldi	r24, 0x3B	; 59
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	2b 81       	ldd	r18, Y+3	; 0x03
 5da:	3c 81       	ldd	r19, Y+4	; 0x04
 5dc:	2c 59       	subi	r18, 0x9C	; 156
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	f9 01       	movw	r30, r18
 5e2:	20 81       	ld	r18, Z
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 83       	st	Z, r18
 5e8:	47 c0       	rjmp	.+142    	; 0x678 <displayHoursAndMinutesWithChangingValueMode+0x136>
	}
	else if(j == 1){
 5ea:	80 91 8a 00 	lds	r24, 0x008A
 5ee:	90 91 8b 00 	lds	r25, 0x008B
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	91 05       	cpc	r25, r1
 5f6:	89 f4       	brne	.+34     	; 0x61a <displayHoursAndMinutesWithChangingValueMode+0xd8>
		PORTB = Column[1];
 5f8:	88 e3       	ldi	r24, 0x38	; 56
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	20 91 6f 00 	lds	r18, 0x006F
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
		PORTA = Digits[dec];
 604:	8b e3       	ldi	r24, 0x3B	; 59
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	29 81       	ldd	r18, Y+1	; 0x01
 60a:	3a 81       	ldd	r19, Y+2	; 0x02
 60c:	2c 59       	subi	r18, 0x9C	; 156
 60e:	3f 4f       	sbci	r19, 0xFF	; 255
 610:	f9 01       	movw	r30, r18
 612:	20 81       	ld	r18, Z
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
 618:	2f c0       	rjmp	.+94     	; 0x678 <displayHoursAndMinutesWithChangingValueMode+0x136>
	}
	else if(j == 2){
 61a:	80 91 8a 00 	lds	r24, 0x008A
 61e:	90 91 8b 00 	lds	r25, 0x008B
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	91 05       	cpc	r25, r1
 626:	89 f4       	brne	.+34     	; 0x64a <displayHoursAndMinutesWithChangingValueMode+0x108>
		PORTB = Column[2];
 628:	88 e3       	ldi	r24, 0x38	; 56
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	20 91 70 00 	lds	r18, 0x0070
 630:	fc 01       	movw	r30, r24
 632:	20 83       	st	Z, r18
		PORTA = Digits[HrsOne];
 634:	8b e3       	ldi	r24, 0x3B	; 59
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	2f 81       	ldd	r18, Y+7	; 0x07
 63a:	38 85       	ldd	r19, Y+8	; 0x08
 63c:	2c 59       	subi	r18, 0x9C	; 156
 63e:	3f 4f       	sbci	r19, 0xFF	; 255
 640:	f9 01       	movw	r30, r18
 642:	20 81       	ld	r18, Z
 644:	fc 01       	movw	r30, r24
 646:	20 83       	st	Z, r18
 648:	17 c0       	rjmp	.+46     	; 0x678 <displayHoursAndMinutesWithChangingValueMode+0x136>
	}
	else if(j == 3){
 64a:	80 91 8a 00 	lds	r24, 0x008A
 64e:	90 91 8b 00 	lds	r25, 0x008B
 652:	83 30       	cpi	r24, 0x03	; 3
 654:	91 05       	cpc	r25, r1
 656:	81 f4       	brne	.+32     	; 0x678 <displayHoursAndMinutesWithChangingValueMode+0x136>
		PORTB = Column[3];
 658:	88 e3       	ldi	r24, 0x38	; 56
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	20 91 71 00 	lds	r18, 0x0071
 660:	fc 01       	movw	r30, r24
 662:	20 83       	st	Z, r18
		PORTA = Digits[HrsDec];
 664:	8b e3       	ldi	r24, 0x3B	; 59
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	2d 81       	ldd	r18, Y+5	; 0x05
 66a:	3e 81       	ldd	r19, Y+6	; 0x06
 66c:	2c 59       	subi	r18, 0x9C	; 156
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	f9 01       	movw	r30, r18
 672:	20 81       	ld	r18, Z
 674:	fc 01       	movw	r30, r24
 676:	20 83       	st	Z, r18
	}
	j++;
 678:	80 91 8a 00 	lds	r24, 0x008A
 67c:	90 91 8b 00 	lds	r25, 0x008B
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	90 93 8b 00 	sts	0x008B, r25
 686:	80 93 8a 00 	sts	0x008A, r24
	if(changeMode == LEFT_COLS){
 68a:	20 91 88 00 	lds	r18, 0x0088
 68e:	30 91 89 00 	lds	r19, 0x0089
 692:	80 91 78 00 	lds	r24, 0x0078
 696:	90 91 79 00 	lds	r25, 0x0079
 69a:	28 17       	cp	r18, r24
 69c:	39 07       	cpc	r19, r25
 69e:	89 f4       	brne	.+34     	; 0x6c2 <displayHoursAndMinutesWithChangingValueMode+0x180>
		j = (j%2)+2;
 6a0:	80 91 8a 00 	lds	r24, 0x008A
 6a4:	90 91 8b 00 	lds	r25, 0x008B
 6a8:	81 70       	andi	r24, 0x01	; 1
 6aa:	90 78       	andi	r25, 0x80	; 128
 6ac:	99 23       	and	r25, r25
 6ae:	24 f4       	brge	.+8      	; 0x6b8 <displayHoursAndMinutesWithChangingValueMode+0x176>
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	8e 6f       	ori	r24, 0xFE	; 254
 6b4:	9f 6f       	ori	r25, 0xFF	; 255
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	02 96       	adiw	r24, 0x02	; 2
 6ba:	90 93 8b 00 	sts	0x008B, r25
 6be:	80 93 8a 00 	sts	0x008A, r24
	}
	if(changeMode == RIGHT_COLS){
 6c2:	20 91 88 00 	lds	r18, 0x0088
 6c6:	30 91 89 00 	lds	r19, 0x0089
 6ca:	80 91 76 00 	lds	r24, 0x0076
 6ce:	90 91 77 00 	lds	r25, 0x0077
 6d2:	28 17       	cp	r18, r24
 6d4:	39 07       	cpc	r19, r25
 6d6:	81 f4       	brne	.+32     	; 0x6f8 <displayHoursAndMinutesWithChangingValueMode+0x1b6>
		j = j%2;
 6d8:	80 91 8a 00 	lds	r24, 0x008A
 6dc:	90 91 8b 00 	lds	r25, 0x008B
 6e0:	81 70       	andi	r24, 0x01	; 1
 6e2:	90 78       	andi	r25, 0x80	; 128
 6e4:	99 23       	and	r25, r25
 6e6:	24 f4       	brge	.+8      	; 0x6f0 <displayHoursAndMinutesWithChangingValueMode+0x1ae>
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	8e 6f       	ori	r24, 0xFE	; 254
 6ec:	9f 6f       	ori	r25, 0xFF	; 255
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	90 93 8b 00 	sts	0x008B, r25
 6f4:	80 93 8a 00 	sts	0x008A, r24
	}
	if(changeMode == CHANGE_MODE_DISABLED)	{
 6f8:	20 91 88 00 	lds	r18, 0x0088
 6fc:	30 91 89 00 	lds	r19, 0x0089
 700:	80 91 7a 00 	lds	r24, 0x007A
 704:	90 91 7b 00 	lds	r25, 0x007B
 708:	28 17       	cp	r18, r24
 70a:	39 07       	cpc	r19, r25
 70c:	81 f4       	brne	.+32     	; 0x72e <displayHoursAndMinutesWithChangingValueMode+0x1ec>
		j = j % 4;
 70e:	80 91 8a 00 	lds	r24, 0x008A
 712:	90 91 8b 00 	lds	r25, 0x008B
 716:	83 70       	andi	r24, 0x03	; 3
 718:	90 78       	andi	r25, 0x80	; 128
 71a:	99 23       	and	r25, r25
 71c:	24 f4       	brge	.+8      	; 0x726 <displayHoursAndMinutesWithChangingValueMode+0x1e4>
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	8c 6f       	ori	r24, 0xFC	; 252
 722:	9f 6f       	ori	r25, 0xFF	; 255
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	90 93 8b 00 	sts	0x008B, r25
 72a:	80 93 8a 00 	sts	0x008A, r24
	}


}
 72e:	28 96       	adiw	r28, 0x08	; 8
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <displayMinutesAndSecondsWithChangingValueMode>:


void displayMinutesAndSecondsWithChangingValueMode(){
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	28 97       	sbiw	r28, 0x08	; 8
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
	PORTB = 0xFF;
 754:	88 e3       	ldi	r24, 0x38	; 56
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	2f ef       	ldi	r18, 0xFF	; 255
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
	int dec = seconds / 10;
 75e:	80 91 82 00 	lds	r24, 0x0082
 762:	90 91 83 00 	lds	r25, 0x0083
 766:	2a e0       	ldi	r18, 0x0A	; 10
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	b9 01       	movw	r22, r18
 76c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 770:	9b 01       	movw	r18, r22
 772:	3a 83       	std	Y+2, r19	; 0x02
 774:	29 83       	std	Y+1, r18	; 0x01
	int one = seconds % 10;
 776:	80 91 82 00 	lds	r24, 0x0082
 77a:	90 91 83 00 	lds	r25, 0x0083
 77e:	2a e0       	ldi	r18, 0x0A	; 10
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	b9 01       	movw	r22, r18
 784:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 788:	9c 83       	std	Y+4, r25	; 0x04
 78a:	8b 83       	std	Y+3, r24	; 0x03
	int minDec = minutes / 10;
 78c:	80 91 84 00 	lds	r24, 0x0084
 790:	90 91 85 00 	lds	r25, 0x0085
 794:	2a e0       	ldi	r18, 0x0A	; 10
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	b9 01       	movw	r22, r18
 79a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 79e:	9b 01       	movw	r18, r22
 7a0:	3e 83       	std	Y+6, r19	; 0x06
 7a2:	2d 83       	std	Y+5, r18	; 0x05
	int minOne = minutes % 10;
 7a4:	80 91 84 00 	lds	r24, 0x0084
 7a8:	90 91 85 00 	lds	r25, 0x0085
 7ac:	2a e0       	ldi	r18, 0x0A	; 10
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	b9 01       	movw	r22, r18
 7b2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__divmodhi4>
 7b6:	98 87       	std	Y+8, r25	; 0x08
 7b8:	8f 83       	std	Y+7, r24	; 0x07
	if(j == 0){
 7ba:	80 91 8a 00 	lds	r24, 0x008A
 7be:	90 91 8b 00 	lds	r25, 0x008B
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	89 f4       	brne	.+34     	; 0x7e8 <displayMinutesAndSecondsWithChangingValueMode+0xa8>
		PORTB = Column[0];
 7c6:	88 e3       	ldi	r24, 0x38	; 56
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	20 91 6e 00 	lds	r18, 0x006E
 7ce:	fc 01       	movw	r30, r24
 7d0:	20 83       	st	Z, r18
		PORTA = Digits[one];
 7d2:	8b e3       	ldi	r24, 0x3B	; 59
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	2b 81       	ldd	r18, Y+3	; 0x03
 7d8:	3c 81       	ldd	r19, Y+4	; 0x04
 7da:	2c 59       	subi	r18, 0x9C	; 156
 7dc:	3f 4f       	sbci	r19, 0xFF	; 255
 7de:	f9 01       	movw	r30, r18
 7e0:	20 81       	ld	r18, Z
 7e2:	fc 01       	movw	r30, r24
 7e4:	20 83       	st	Z, r18
 7e6:	47 c0       	rjmp	.+142    	; 0x876 <__stack+0x17>
	}
	else if(j == 1){
 7e8:	80 91 8a 00 	lds	r24, 0x008A
 7ec:	90 91 8b 00 	lds	r25, 0x008B
 7f0:	81 30       	cpi	r24, 0x01	; 1
 7f2:	91 05       	cpc	r25, r1
 7f4:	89 f4       	brne	.+34     	; 0x818 <displayMinutesAndSecondsWithChangingValueMode+0xd8>
		PORTB = Column[1];
 7f6:	88 e3       	ldi	r24, 0x38	; 56
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	20 91 6f 00 	lds	r18, 0x006F
 7fe:	fc 01       	movw	r30, r24
 800:	20 83       	st	Z, r18
		PORTA = Digits[dec];
 802:	8b e3       	ldi	r24, 0x3B	; 59
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	29 81       	ldd	r18, Y+1	; 0x01
 808:	3a 81       	ldd	r19, Y+2	; 0x02
 80a:	2c 59       	subi	r18, 0x9C	; 156
 80c:	3f 4f       	sbci	r19, 0xFF	; 255
 80e:	f9 01       	movw	r30, r18
 810:	20 81       	ld	r18, Z
 812:	fc 01       	movw	r30, r24
 814:	20 83       	st	Z, r18
 816:	2f c0       	rjmp	.+94     	; 0x876 <__stack+0x17>
	}
	else if(j == 2){
 818:	80 91 8a 00 	lds	r24, 0x008A
 81c:	90 91 8b 00 	lds	r25, 0x008B
 820:	82 30       	cpi	r24, 0x02	; 2
 822:	91 05       	cpc	r25, r1
 824:	89 f4       	brne	.+34     	; 0x848 <displayMinutesAndSecondsWithChangingValueMode+0x108>
		PORTB = Column[2];
 826:	88 e3       	ldi	r24, 0x38	; 56
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	20 91 70 00 	lds	r18, 0x0070
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
		PORTA = Digits[minOne];
 832:	8b e3       	ldi	r24, 0x3B	; 59
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	2f 81       	ldd	r18, Y+7	; 0x07
 838:	38 85       	ldd	r19, Y+8	; 0x08
 83a:	2c 59       	subi	r18, 0x9C	; 156
 83c:	3f 4f       	sbci	r19, 0xFF	; 255
 83e:	f9 01       	movw	r30, r18
 840:	20 81       	ld	r18, Z
 842:	fc 01       	movw	r30, r24
 844:	20 83       	st	Z, r18
 846:	17 c0       	rjmp	.+46     	; 0x876 <__stack+0x17>
	}
	else if(j == 3){
 848:	80 91 8a 00 	lds	r24, 0x008A
 84c:	90 91 8b 00 	lds	r25, 0x008B
 850:	83 30       	cpi	r24, 0x03	; 3
 852:	91 05       	cpc	r25, r1
 854:	81 f4       	brne	.+32     	; 0x876 <__stack+0x17>
		PORTB = Column[3];
 856:	88 e3       	ldi	r24, 0x38	; 56
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	20 91 71 00 	lds	r18, 0x0071
 85e:	fc 01       	movw	r30, r24
 860:	20 83       	st	Z, r18
		PORTA = Digits[minDec];
 862:	8b e3       	ldi	r24, 0x3B	; 59
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	2d 81       	ldd	r18, Y+5	; 0x05
 868:	3e 81       	ldd	r19, Y+6	; 0x06
 86a:	2c 59       	subi	r18, 0x9C	; 156
 86c:	3f 4f       	sbci	r19, 0xFF	; 255
 86e:	f9 01       	movw	r30, r18
 870:	20 81       	ld	r18, Z
 872:	fc 01       	movw	r30, r24
 874:	20 83       	st	Z, r18
	}
	j++;
 876:	80 91 8a 00 	lds	r24, 0x008A
 87a:	90 91 8b 00 	lds	r25, 0x008B
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	90 93 8b 00 	sts	0x008B, r25
 884:	80 93 8a 00 	sts	0x008A, r24
	if(changeMode == LEFT_COLS){
 888:	20 91 88 00 	lds	r18, 0x0088
 88c:	30 91 89 00 	lds	r19, 0x0089
 890:	80 91 78 00 	lds	r24, 0x0078
 894:	90 91 79 00 	lds	r25, 0x0079
 898:	28 17       	cp	r18, r24
 89a:	39 07       	cpc	r19, r25
 89c:	89 f4       	brne	.+34     	; 0x8c0 <__stack+0x61>
		j = (j%2)+2;
 89e:	80 91 8a 00 	lds	r24, 0x008A
 8a2:	90 91 8b 00 	lds	r25, 0x008B
 8a6:	81 70       	andi	r24, 0x01	; 1
 8a8:	90 78       	andi	r25, 0x80	; 128
 8aa:	99 23       	and	r25, r25
 8ac:	24 f4       	brge	.+8      	; 0x8b6 <__stack+0x57>
 8ae:	01 97       	sbiw	r24, 0x01	; 1
 8b0:	8e 6f       	ori	r24, 0xFE	; 254
 8b2:	9f 6f       	ori	r25, 0xFF	; 255
 8b4:	01 96       	adiw	r24, 0x01	; 1
 8b6:	02 96       	adiw	r24, 0x02	; 2
 8b8:	90 93 8b 00 	sts	0x008B, r25
 8bc:	80 93 8a 00 	sts	0x008A, r24
	}
	if(changeMode == RIGHT_COLS){
 8c0:	20 91 88 00 	lds	r18, 0x0088
 8c4:	30 91 89 00 	lds	r19, 0x0089
 8c8:	80 91 76 00 	lds	r24, 0x0076
 8cc:	90 91 77 00 	lds	r25, 0x0077
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	81 f4       	brne	.+32     	; 0x8f6 <__stack+0x97>
		j = j%2;
 8d6:	80 91 8a 00 	lds	r24, 0x008A
 8da:	90 91 8b 00 	lds	r25, 0x008B
 8de:	81 70       	andi	r24, 0x01	; 1
 8e0:	90 78       	andi	r25, 0x80	; 128
 8e2:	99 23       	and	r25, r25
 8e4:	24 f4       	brge	.+8      	; 0x8ee <__stack+0x8f>
 8e6:	01 97       	sbiw	r24, 0x01	; 1
 8e8:	8e 6f       	ori	r24, 0xFE	; 254
 8ea:	9f 6f       	ori	r25, 0xFF	; 255
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	90 93 8b 00 	sts	0x008B, r25
 8f2:	80 93 8a 00 	sts	0x008A, r24
	}
	if(changeMode == CHANGE_MODE_DISABLED)	{
 8f6:	20 91 88 00 	lds	r18, 0x0088
 8fa:	30 91 89 00 	lds	r19, 0x0089
 8fe:	80 91 7a 00 	lds	r24, 0x007A
 902:	90 91 7b 00 	lds	r25, 0x007B
 906:	28 17       	cp	r18, r24
 908:	39 07       	cpc	r19, r25
 90a:	81 f4       	brne	.+32     	; 0x92c <__stack+0xcd>
		j = j % 4;
 90c:	80 91 8a 00 	lds	r24, 0x008A
 910:	90 91 8b 00 	lds	r25, 0x008B
 914:	83 70       	andi	r24, 0x03	; 3
 916:	90 78       	andi	r25, 0x80	; 128
 918:	99 23       	and	r25, r25
 91a:	24 f4       	brge	.+8      	; 0x924 <__stack+0xc5>
 91c:	01 97       	sbiw	r24, 0x01	; 1
 91e:	8c 6f       	ori	r24, 0xFC	; 252
 920:	9f 6f       	ori	r25, 0xFF	; 255
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	90 93 8b 00 	sts	0x008B, r25
 928:	80 93 8a 00 	sts	0x008A, r24
	}
}
 92c:	28 96       	adiw	r28, 0x08	; 8
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	08 95       	ret

0000093e <isPowerOfTwo>:

int isPowerOfTwo(unsigned n)
{
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	00 d0       	rcall	.+0      	; 0x944 <isPowerOfTwo+0x6>
 944:	cd b7       	in	r28, 0x3d	; 61
 946:	de b7       	in	r29, 0x3e	; 62
 948:	9a 83       	std	Y+2, r25	; 0x02
 94a:	89 83       	std	Y+1, r24	; 0x01
	return n && (! (n & (n-1)) );
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	9a 81       	ldd	r25, Y+2	; 0x02
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	71 f0       	breq	.+28     	; 0x970 <isPowerOfTwo+0x32>
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	9a 81       	ldd	r25, Y+2	; 0x02
 958:	9c 01       	movw	r18, r24
 95a:	21 50       	subi	r18, 0x01	; 1
 95c:	31 09       	sbc	r19, r1
 95e:	89 81       	ldd	r24, Y+1	; 0x01
 960:	9a 81       	ldd	r25, Y+2	; 0x02
 962:	82 23       	and	r24, r18
 964:	93 23       	and	r25, r19
 966:	00 97       	sbiw	r24, 0x00	; 0
 968:	19 f4       	brne	.+6      	; 0x970 <isPowerOfTwo+0x32>
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <isPowerOfTwo+0x36>
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	90 e0       	ldi	r25, 0x00	; 0
	
}
 974:	0f 90       	pop	r0
 976:	0f 90       	pop	r0
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	08 95       	ret

0000097e <findPosition>:
//sprawdza na ktorej pozycji w podanym bajcie bit jest niezerowy, jesli jest wiecej niz 1 niezerowy bit zwraca 0
int findPosition(unsigned n)
{
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	00 d0       	rcall	.+0      	; 0x984 <findPosition+0x6>
 984:	00 d0       	rcall	.+0      	; 0x986 <findPosition+0x8>
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	9c 83       	std	Y+4, r25	; 0x04
 98c:	8b 83       	std	Y+3, r24	; 0x03

	if (!isPowerOfTwo(n))
 98e:	8b 81       	ldd	r24, Y+3	; 0x03
 990:	9c 81       	ldd	r25, Y+4	; 0x04
 992:	0e 94 9f 04 	call	0x93e	; 0x93e <isPowerOfTwo>
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	19 f4       	brne	.+6      	; 0x9a0 <findPosition+0x22>
	return 0;
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	14 c0       	rjmp	.+40     	; 0x9c8 <findPosition+0x4a>
	unsigned count = 0;
 9a0:	1a 82       	std	Y+2, r1	; 0x02
 9a2:	19 82       	std	Y+1, r1	; 0x01

	while (n)
 9a4:	0b c0       	rjmp	.+22     	; 0x9bc <findPosition+0x3e>
	{
		n = n >> 1;
 9a6:	8b 81       	ldd	r24, Y+3	; 0x03
 9a8:	9c 81       	ldd	r25, Y+4	; 0x04
 9aa:	96 95       	lsr	r25
 9ac:	87 95       	ror	r24
 9ae:	9c 83       	std	Y+4, r25	; 0x04
 9b0:	8b 83       	std	Y+3, r24	; 0x03
		++count;
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	9a 81       	ldd	r25, Y+2	; 0x02
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	9a 83       	std	Y+2, r25	; 0x02
 9ba:	89 83       	std	Y+1, r24	; 0x01

	if (!isPowerOfTwo(n))
	return 0;
	unsigned count = 0;

	while (n)
 9bc:	8b 81       	ldd	r24, Y+3	; 0x03
 9be:	9c 81       	ldd	r25, Y+4	; 0x04
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	89 f7       	brne	.-30     	; 0x9a6 <findPosition+0x28>
	{
		n = n >> 1;
		++count;
	}
	return count;
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	9a 81       	ldd	r25, Y+2	; 0x02
 9c8:	0f 90       	pop	r0
 9ca:	0f 90       	pop	r0
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	08 95       	ret

000009d6 <main>:

#include "Scheduler.h"
#include "Clock.h"

int main(void)
{
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62


        init();
 9de:	0e 94 15 05 	call	0xa2a	; 0xa2a <init>
		initCounter();
 9e2:	0e 94 6c 05 	call	0xad8	; 0xad8 <initCounter>

        addTask(getKeyNumber, 200); //task do wykrywania nacisnietego klawisza, trzeba przemyslec co ile wykonywac zeby dobrze dzialalo podswietlanie i zeby przycisk reagowal szybko
 9e6:	68 ec       	ldi	r22, 0xC8	; 200
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	81 e6       	ldi	r24, 0x61	; 97
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 94 05 	call	0xb28	; 0xb28 <addTask>
        addTask(manageClock, 1000); //task odpowiadajacy za odliczanie czasu
 9f2:	68 ee       	ldi	r22, 0xE8	; 232
 9f4:	73 e0       	ldi	r23, 0x03	; 3
 9f6:	83 e4       	ldi	r24, 0x43	; 67
 9f8:	92 e0       	ldi	r25, 0x02	; 2
 9fa:	0e 94 94 05 	call	0xb28	; 0xb28 <addTask>
        addTask(displayClock, 5); //task wyswietlajacy na wyswietlaczu 7-segm.
 9fe:	65 e0       	ldi	r22, 0x05	; 5
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	89 e4       	ldi	r24, 0x49	; 73
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 94 05 	call	0xb28	; 0xb28 <addTask>
        addTask(changeDisplayMode, 1000); //task do zmiany trybu wyswietlania HH:MM / MM:SS
 a0a:	68 ee       	ldi	r22, 0xE8	; 232
 a0c:	73 e0       	ldi	r23, 0x03	; 3
 a0e:	8c e1       	ldi	r24, 0x1C	; 28
 a10:	92 e0       	ldi	r25, 0x02	; 2
 a12:	0e 94 94 05 	call	0xb28	; 0xb28 <addTask>
		//addTask(setMinsAndSecs, 200); //*task do zmiany minut i sekund
		//addTask(setHoursAndMins, 200); //*task do zmiany godzin i minut
		addTask(handleAddValue,200);
 a16:	68 ec       	ldi	r22, 0xC8	; 200
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	83 e1       	ldi	r24, 0x13	; 19
 a1c:	91 e0       	ldi	r25, 0x01	; 1
 a1e:	0e 94 94 05 	call	0xb28	; 0xb28 <addTask>
        sei();
 a22:	78 94       	sei
        while(1){
                execute();
 a24:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <execute>
        }
 a28:	fd cf       	rjmp	.-6      	; 0xa24 <main+0x4e>

00000a2a <init>:

#include "Scheduler.h"

int tasks_num = 0;

void init(){
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	00 d0       	rcall	.+0      	; 0xa30 <init+0x6>
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62

	for(int i = 0; i < MAX_TASKS; i++){
 a34:	1a 82       	std	Y+2, r1	; 0x02
 a36:	19 82       	std	Y+1, r1	; 0x01
 a38:	44 c0       	rjmp	.+136    	; 0xac2 <init+0x98>
		tasks[i].Interval = 0;
 a3a:	29 81       	ldd	r18, Y+1	; 0x01
 a3c:	3a 81       	ldd	r19, Y+2	; 0x02
 a3e:	c9 01       	movw	r24, r18
 a40:	88 0f       	add	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	88 0f       	add	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	82 1b       	sub	r24, r18
 a4e:	93 0b       	sbc	r25, r19
 a50:	8e 56       	subi	r24, 0x6E	; 110
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	fc 01       	movw	r30, r24
 a56:	11 82       	std	Z+1, r1	; 0x01
 a58:	10 82       	st	Z, r1
		tasks[i].ready = 0;
 a5a:	29 81       	ldd	r18, Y+1	; 0x01
 a5c:	3a 81       	ldd	r19, Y+2	; 0x02
 a5e:	c9 01       	movw	r24, r18
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	88 0f       	add	r24, r24
 a66:	99 1f       	adc	r25, r25
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	82 1b       	sub	r24, r18
 a6e:	93 0b       	sbc	r25, r19
 a70:	8c 56       	subi	r24, 0x6C	; 108
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	fc 01       	movw	r30, r24
 a76:	10 82       	st	Z, r1
		tasks[i].t = 0;
 a78:	29 81       	ldd	r18, Y+1	; 0x01
 a7a:	3a 81       	ldd	r19, Y+2	; 0x02
 a7c:	c9 01       	movw	r24, r18
 a7e:	88 0f       	add	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	88 0f       	add	r24, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	82 1b       	sub	r24, r18
 a8c:	93 0b       	sbc	r25, r19
 a8e:	82 57       	subi	r24, 0x72	; 114
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	fc 01       	movw	r30, r24
 a94:	11 82       	std	Z+1, r1	; 0x01
 a96:	10 82       	st	Z, r1
		tasks[i].ToGo = 0;
 a98:	29 81       	ldd	r18, Y+1	; 0x01
 a9a:	3a 81       	ldd	r19, Y+2	; 0x02
 a9c:	c9 01       	movw	r24, r18
 a9e:	88 0f       	add	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	88 0f       	add	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	82 1b       	sub	r24, r18
 aac:	93 0b       	sbc	r25, r19
 aae:	80 57       	subi	r24, 0x70	; 112
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	fc 01       	movw	r30, r24
 ab4:	11 82       	std	Z+1, r1	; 0x01
 ab6:	10 82       	st	Z, r1

int tasks_num = 0;

void init(){

	for(int i = 0; i < MAX_TASKS; i++){
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	9a 81       	ldd	r25, Y+2	; 0x02
 abc:	01 96       	adiw	r24, 0x01	; 1
 abe:	9a 83       	std	Y+2, r25	; 0x02
 ac0:	89 83       	std	Y+1, r24	; 0x01
 ac2:	89 81       	ldd	r24, Y+1	; 0x01
 ac4:	9a 81       	ldd	r25, Y+2	; 0x02
 ac6:	8a 30       	cpi	r24, 0x0A	; 10
 ac8:	91 05       	cpc	r25, r1
 aca:	0c f4       	brge	.+2      	; 0xace <init+0xa4>
 acc:	b6 cf       	rjmp	.-148    	; 0xa3a <init+0x10>
		tasks[i].Interval = 0;
		tasks[i].ready = 0;
		tasks[i].t = 0;
		tasks[i].ToGo = 0;
	}
}
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	08 95       	ret

00000ad8 <initCounter>:

void initCounter(){
 ad8:	cf 93       	push	r28
 ada:	df 93       	push	r29
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
		// prescaler na 64
		OCR0 = 250;
 ae0:	8c e5       	ldi	r24, 0x5C	; 92
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	2a ef       	ldi	r18, 0xFA	; 250
 ae6:	fc 01       	movw	r30, r24
 ae8:	20 83       	st	Z, r18
		TCCR0 |= (0 << WGM00) | (1 << WGM01) | (0 << CS02) | (1 << CS01) | (1 << CS00) | (0 << COM01) | (0 << COM00);
 aea:	83 e5       	ldi	r24, 0x53	; 83
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	23 e5       	ldi	r18, 0x53	; 83
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	f9 01       	movw	r30, r18
 af4:	20 81       	ld	r18, Z
 af6:	2b 60       	ori	r18, 0x0B	; 11
 af8:	fc 01       	movw	r30, r24
 afa:	20 83       	st	Z, r18
		TIMSK |= (1 << TOIE0) | (1 << OCIE0);
 afc:	89 e5       	ldi	r24, 0x59	; 89
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	29 e5       	ldi	r18, 0x59	; 89
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	f9 01       	movw	r30, r18
 b06:	20 81       	ld	r18, Z
 b08:	23 60       	ori	r18, 0x03	; 3
 b0a:	fc 01       	movw	r30, r24
 b0c:	20 83       	st	Z, r18

		DDRA = 0xFF;
 b0e:	8a e3       	ldi	r24, 0x3A	; 58
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	2f ef       	ldi	r18, 0xFF	; 255
 b14:	fc 01       	movw	r30, r24
 b16:	20 83       	st	Z, r18
		DDRB = 0xFF;
 b18:	87 e3       	ldi	r24, 0x37	; 55
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	2f ef       	ldi	r18, 0xFF	; 255
 b1e:	fc 01       	movw	r30, r24
 b20:	20 83       	st	Z, r18
		//PORTC = 0b000000100; //to niepotrzebne
}
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	08 95       	ret

00000b28 <addTask>:

void addTask(TASK_PTR task, uint16_t period){
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
 b2c:	00 d0       	rcall	.+0      	; 0xb2e <addTask+0x6>
 b2e:	00 d0       	rcall	.+0      	; 0xb30 <addTask+0x8>
 b30:	cd b7       	in	r28, 0x3d	; 61
 b32:	de b7       	in	r29, 0x3e	; 62
 b34:	9a 83       	std	Y+2, r25	; 0x02
 b36:	89 83       	std	Y+1, r24	; 0x01
 b38:	7c 83       	std	Y+4, r23	; 0x04
 b3a:	6b 83       	std	Y+3, r22	; 0x03
	if(tasks_num < MAX_TASKS){
 b3c:	80 91 8c 00 	lds	r24, 0x008C
 b40:	90 91 8d 00 	lds	r25, 0x008D
 b44:	8a 30       	cpi	r24, 0x0A	; 10
 b46:	91 05       	cpc	r25, r1
 b48:	0c f0       	brlt	.+2      	; 0xb4c <addTask+0x24>
 b4a:	45 c0       	rjmp	.+138    	; 0xbd6 <addTask+0xae>
		tasks[tasks_num].Interval = period;
 b4c:	20 91 8c 00 	lds	r18, 0x008C
 b50:	30 91 8d 00 	lds	r19, 0x008D
 b54:	c9 01       	movw	r24, r18
 b56:	88 0f       	add	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	88 0f       	add	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	88 0f       	add	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	82 1b       	sub	r24, r18
 b64:	93 0b       	sbc	r25, r19
 b66:	8e 56       	subi	r24, 0x6E	; 110
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	2b 81       	ldd	r18, Y+3	; 0x03
 b6c:	3c 81       	ldd	r19, Y+4	; 0x04
 b6e:	fc 01       	movw	r30, r24
 b70:	31 83       	std	Z+1, r19	; 0x01
 b72:	20 83       	st	Z, r18
		tasks[tasks_num].ToGo = period;
 b74:	20 91 8c 00 	lds	r18, 0x008C
 b78:	30 91 8d 00 	lds	r19, 0x008D
 b7c:	c9 01       	movw	r24, r18
 b7e:	88 0f       	add	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	88 0f       	add	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	82 1b       	sub	r24, r18
 b8c:	93 0b       	sbc	r25, r19
 b8e:	80 57       	subi	r24, 0x70	; 112
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	2b 81       	ldd	r18, Y+3	; 0x03
 b94:	3c 81       	ldd	r19, Y+4	; 0x04
 b96:	fc 01       	movw	r30, r24
 b98:	31 83       	std	Z+1, r19	; 0x01
 b9a:	20 83       	st	Z, r18
		tasks[tasks_num].t = task;
 b9c:	20 91 8c 00 	lds	r18, 0x008C
 ba0:	30 91 8d 00 	lds	r19, 0x008D
 ba4:	c9 01       	movw	r24, r18
 ba6:	88 0f       	add	r24, r24
 ba8:	99 1f       	adc	r25, r25
 baa:	88 0f       	add	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	88 0f       	add	r24, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	82 1b       	sub	r24, r18
 bb4:	93 0b       	sbc	r25, r19
 bb6:	82 57       	subi	r24, 0x72	; 114
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	29 81       	ldd	r18, Y+1	; 0x01
 bbc:	3a 81       	ldd	r19, Y+2	; 0x02
 bbe:	fc 01       	movw	r30, r24
 bc0:	31 83       	std	Z+1, r19	; 0x01
 bc2:	20 83       	st	Z, r18
		tasks_num++;
 bc4:	80 91 8c 00 	lds	r24, 0x008C
 bc8:	90 91 8d 00 	lds	r25, 0x008D
 bcc:	01 96       	adiw	r24, 0x01	; 1
 bce:	90 93 8d 00 	sts	0x008D, r25
 bd2:	80 93 8c 00 	sts	0x008C, r24
	}
}
 bd6:	0f 90       	pop	r0
 bd8:	0f 90       	pop	r0
 bda:	0f 90       	pop	r0
 bdc:	0f 90       	pop	r0
 bde:	df 91       	pop	r29
 be0:	cf 91       	pop	r28
 be2:	08 95       	ret

00000be4 <schedule>:
		tasks_num++;
	}
}

//wykonywana w przerwaniu
void schedule(){
 be4:	cf 93       	push	r28
 be6:	df 93       	push	r29
 be8:	00 d0       	rcall	.+0      	; 0xbea <schedule+0x6>
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
	//int i = 0;
	for(int i = 0; i < MAX_TASKS; i++){
 bee:	1a 82       	std	Y+2, r1	; 0x02
 bf0:	19 82       	std	Y+1, r1	; 0x01
 bf2:	e6 c0       	rjmp	.+460    	; 0xdc0 <schedule+0x1dc>
		//jesli task nie jest pusty zmiejszamy ToGo
		if(tasks[i].t != 0){
 bf4:	29 81       	ldd	r18, Y+1	; 0x01
 bf6:	3a 81       	ldd	r19, Y+2	; 0x02
 bf8:	c9 01       	movw	r24, r18
 bfa:	88 0f       	add	r24, r24
 bfc:	99 1f       	adc	r25, r25
 bfe:	88 0f       	add	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	88 0f       	add	r24, r24
 c04:	99 1f       	adc	r25, r25
 c06:	82 1b       	sub	r24, r18
 c08:	93 0b       	sbc	r25, r19
 c0a:	82 57       	subi	r24, 0x72	; 114
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	fc 01       	movw	r30, r24
 c10:	80 81       	ld	r24, Z
 c12:	91 81       	ldd	r25, Z+1	; 0x01
 c14:	00 97       	sbiw	r24, 0x00	; 0
 c16:	09 f4       	brne	.+2      	; 0xc1a <schedule+0x36>
 c18:	ce c0       	rjmp	.+412    	; 0xdb6 <schedule+0x1d2>
			tasks[i].ToGo--;
 c1a:	29 81       	ldd	r18, Y+1	; 0x01
 c1c:	3a 81       	ldd	r19, Y+2	; 0x02
 c1e:	c9 01       	movw	r24, r18
 c20:	88 0f       	add	r24, r24
 c22:	99 1f       	adc	r25, r25
 c24:	88 0f       	add	r24, r24
 c26:	99 1f       	adc	r25, r25
 c28:	88 0f       	add	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	82 1b       	sub	r24, r18
 c2e:	93 0b       	sbc	r25, r19
 c30:	80 57       	subi	r24, 0x70	; 112
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	fc 01       	movw	r30, r24
 c36:	80 81       	ld	r24, Z
 c38:	91 81       	ldd	r25, Z+1	; 0x01
 c3a:	ac 01       	movw	r20, r24
 c3c:	41 50       	subi	r20, 0x01	; 1
 c3e:	51 09       	sbc	r21, r1
 c40:	29 81       	ldd	r18, Y+1	; 0x01
 c42:	3a 81       	ldd	r19, Y+2	; 0x02
 c44:	c9 01       	movw	r24, r18
 c46:	88 0f       	add	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	88 0f       	add	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	88 0f       	add	r24, r24
 c50:	99 1f       	adc	r25, r25
 c52:	82 1b       	sub	r24, r18
 c54:	93 0b       	sbc	r25, r19
 c56:	80 57       	subi	r24, 0x70	; 112
 c58:	9f 4f       	sbci	r25, 0xFF	; 255
 c5a:	fc 01       	movw	r30, r24
 c5c:	51 83       	std	Z+1, r21	; 0x01
 c5e:	40 83       	st	Z, r20
			//jesli ToGo = 0 zwiekszamy ready (periodyczny)
			if(tasks[i].ToGo == 0 && tasks[i].Interval != 0){
 c60:	29 81       	ldd	r18, Y+1	; 0x01
 c62:	3a 81       	ldd	r19, Y+2	; 0x02
 c64:	c9 01       	movw	r24, r18
 c66:	88 0f       	add	r24, r24
 c68:	99 1f       	adc	r25, r25
 c6a:	88 0f       	add	r24, r24
 c6c:	99 1f       	adc	r25, r25
 c6e:	88 0f       	add	r24, r24
 c70:	99 1f       	adc	r25, r25
 c72:	82 1b       	sub	r24, r18
 c74:	93 0b       	sbc	r25, r19
 c76:	80 57       	subi	r24, 0x70	; 112
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	fc 01       	movw	r30, r24
 c7c:	80 81       	ld	r24, Z
 c7e:	91 81       	ldd	r25, Z+1	; 0x01
 c80:	00 97       	sbiw	r24, 0x00	; 0
 c82:	09 f0       	breq	.+2      	; 0xc86 <schedule+0xa2>
 c84:	54 c0       	rjmp	.+168    	; 0xd2e <schedule+0x14a>
 c86:	29 81       	ldd	r18, Y+1	; 0x01
 c88:	3a 81       	ldd	r19, Y+2	; 0x02
 c8a:	c9 01       	movw	r24, r18
 c8c:	88 0f       	add	r24, r24
 c8e:	99 1f       	adc	r25, r25
 c90:	88 0f       	add	r24, r24
 c92:	99 1f       	adc	r25, r25
 c94:	88 0f       	add	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	82 1b       	sub	r24, r18
 c9a:	93 0b       	sbc	r25, r19
 c9c:	8e 56       	subi	r24, 0x6E	; 110
 c9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ca0:	fc 01       	movw	r30, r24
 ca2:	80 81       	ld	r24, Z
 ca4:	91 81       	ldd	r25, Z+1	; 0x01
 ca6:	00 97       	sbiw	r24, 0x00	; 0
 ca8:	09 f4       	brne	.+2      	; 0xcac <schedule+0xc8>
 caa:	41 c0       	rjmp	.+130    	; 0xd2e <schedule+0x14a>
				tasks[i].ready++;
 cac:	29 81       	ldd	r18, Y+1	; 0x01
 cae:	3a 81       	ldd	r19, Y+2	; 0x02
 cb0:	c9 01       	movw	r24, r18
 cb2:	88 0f       	add	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	88 0f       	add	r24, r24
 cb8:	99 1f       	adc	r25, r25
 cba:	88 0f       	add	r24, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	82 1b       	sub	r24, r18
 cc0:	93 0b       	sbc	r25, r19
 cc2:	8c 56       	subi	r24, 0x6C	; 108
 cc4:	9f 4f       	sbci	r25, 0xFF	; 255
 cc6:	fc 01       	movw	r30, r24
 cc8:	80 81       	ld	r24, Z
 cca:	48 2f       	mov	r20, r24
 ccc:	4f 5f       	subi	r20, 0xFF	; 255
 cce:	29 81       	ldd	r18, Y+1	; 0x01
 cd0:	3a 81       	ldd	r19, Y+2	; 0x02
 cd2:	c9 01       	movw	r24, r18
 cd4:	88 0f       	add	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	88 0f       	add	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	88 0f       	add	r24, r24
 cde:	99 1f       	adc	r25, r25
 ce0:	82 1b       	sub	r24, r18
 ce2:	93 0b       	sbc	r25, r19
 ce4:	8c 56       	subi	r24, 0x6C	; 108
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	fc 01       	movw	r30, r24
 cea:	40 83       	st	Z, r20
				tasks[i].ToGo = tasks[i].Interval;
 cec:	29 81       	ldd	r18, Y+1	; 0x01
 cee:	3a 81       	ldd	r19, Y+2	; 0x02
 cf0:	c9 01       	movw	r24, r18
 cf2:	88 0f       	add	r24, r24
 cf4:	99 1f       	adc	r25, r25
 cf6:	88 0f       	add	r24, r24
 cf8:	99 1f       	adc	r25, r25
 cfa:	88 0f       	add	r24, r24
 cfc:	99 1f       	adc	r25, r25
 cfe:	82 1b       	sub	r24, r18
 d00:	93 0b       	sbc	r25, r19
 d02:	8e 56       	subi	r24, 0x6E	; 110
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	fc 01       	movw	r30, r24
 d08:	40 81       	ld	r20, Z
 d0a:	51 81       	ldd	r21, Z+1	; 0x01
 d0c:	29 81       	ldd	r18, Y+1	; 0x01
 d0e:	3a 81       	ldd	r19, Y+2	; 0x02
 d10:	c9 01       	movw	r24, r18
 d12:	88 0f       	add	r24, r24
 d14:	99 1f       	adc	r25, r25
 d16:	88 0f       	add	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	88 0f       	add	r24, r24
 d1c:	99 1f       	adc	r25, r25
 d1e:	82 1b       	sub	r24, r18
 d20:	93 0b       	sbc	r25, r19
 d22:	80 57       	subi	r24, 0x70	; 112
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	fc 01       	movw	r30, r24
 d28:	51 83       	std	Z+1, r21	; 0x01
 d2a:	40 83       	st	Z, r20
 d2c:	44 c0       	rjmp	.+136    	; 0xdb6 <schedule+0x1d2>
			}
			//(nie jest periodyczny)
			else if(tasks[i].ToGo == 0 && tasks[i].Interval == 0){
 d2e:	29 81       	ldd	r18, Y+1	; 0x01
 d30:	3a 81       	ldd	r19, Y+2	; 0x02
 d32:	c9 01       	movw	r24, r18
 d34:	88 0f       	add	r24, r24
 d36:	99 1f       	adc	r25, r25
 d38:	88 0f       	add	r24, r24
 d3a:	99 1f       	adc	r25, r25
 d3c:	88 0f       	add	r24, r24
 d3e:	99 1f       	adc	r25, r25
 d40:	82 1b       	sub	r24, r18
 d42:	93 0b       	sbc	r25, r19
 d44:	80 57       	subi	r24, 0x70	; 112
 d46:	9f 4f       	sbci	r25, 0xFF	; 255
 d48:	fc 01       	movw	r30, r24
 d4a:	80 81       	ld	r24, Z
 d4c:	91 81       	ldd	r25, Z+1	; 0x01
 d4e:	00 97       	sbiw	r24, 0x00	; 0
 d50:	91 f5       	brne	.+100    	; 0xdb6 <schedule+0x1d2>
 d52:	29 81       	ldd	r18, Y+1	; 0x01
 d54:	3a 81       	ldd	r19, Y+2	; 0x02
 d56:	c9 01       	movw	r24, r18
 d58:	88 0f       	add	r24, r24
 d5a:	99 1f       	adc	r25, r25
 d5c:	88 0f       	add	r24, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	88 0f       	add	r24, r24
 d62:	99 1f       	adc	r25, r25
 d64:	82 1b       	sub	r24, r18
 d66:	93 0b       	sbc	r25, r19
 d68:	8e 56       	subi	r24, 0x6E	; 110
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	fc 01       	movw	r30, r24
 d6e:	80 81       	ld	r24, Z
 d70:	91 81       	ldd	r25, Z+1	; 0x01
 d72:	00 97       	sbiw	r24, 0x00	; 0
 d74:	01 f5       	brne	.+64     	; 0xdb6 <schedule+0x1d2>
				tasks[i].ready++;
 d76:	29 81       	ldd	r18, Y+1	; 0x01
 d78:	3a 81       	ldd	r19, Y+2	; 0x02
 d7a:	c9 01       	movw	r24, r18
 d7c:	88 0f       	add	r24, r24
 d7e:	99 1f       	adc	r25, r25
 d80:	88 0f       	add	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	88 0f       	add	r24, r24
 d86:	99 1f       	adc	r25, r25
 d88:	82 1b       	sub	r24, r18
 d8a:	93 0b       	sbc	r25, r19
 d8c:	8c 56       	subi	r24, 0x6C	; 108
 d8e:	9f 4f       	sbci	r25, 0xFF	; 255
 d90:	fc 01       	movw	r30, r24
 d92:	80 81       	ld	r24, Z
 d94:	48 2f       	mov	r20, r24
 d96:	4f 5f       	subi	r20, 0xFF	; 255
 d98:	29 81       	ldd	r18, Y+1	; 0x01
 d9a:	3a 81       	ldd	r19, Y+2	; 0x02
 d9c:	c9 01       	movw	r24, r18
 d9e:	88 0f       	add	r24, r24
 da0:	99 1f       	adc	r25, r25
 da2:	88 0f       	add	r24, r24
 da4:	99 1f       	adc	r25, r25
 da6:	88 0f       	add	r24, r24
 da8:	99 1f       	adc	r25, r25
 daa:	82 1b       	sub	r24, r18
 dac:	93 0b       	sbc	r25, r19
 dae:	8c 56       	subi	r24, 0x6C	; 108
 db0:	9f 4f       	sbci	r25, 0xFF	; 255
 db2:	fc 01       	movw	r30, r24
 db4:	40 83       	st	Z, r20
}

//wykonywana w przerwaniu
void schedule(){
	//int i = 0;
	for(int i = 0; i < MAX_TASKS; i++){
 db6:	89 81       	ldd	r24, Y+1	; 0x01
 db8:	9a 81       	ldd	r25, Y+2	; 0x02
 dba:	01 96       	adiw	r24, 0x01	; 1
 dbc:	9a 83       	std	Y+2, r25	; 0x02
 dbe:	89 83       	std	Y+1, r24	; 0x01
 dc0:	89 81       	ldd	r24, Y+1	; 0x01
 dc2:	9a 81       	ldd	r25, Y+2	; 0x02
 dc4:	8a 30       	cpi	r24, 0x0A	; 10
 dc6:	91 05       	cpc	r25, r1
 dc8:	0c f4       	brge	.+2      	; 0xdcc <schedule+0x1e8>
 dca:	14 cf       	rjmp	.-472    	; 0xbf4 <schedule+0x10>
			else if(tasks[i].ToGo == 0 && tasks[i].Interval == 0){
				tasks[i].ready++;
			}
		}
	}
}
 dcc:	0f 90       	pop	r0
 dce:	0f 90       	pop	r0
 dd0:	df 91       	pop	r29
 dd2:	cf 91       	pop	r28
 dd4:	08 95       	ret

00000dd6 <execute>:

void execute(){
 dd6:	cf 93       	push	r28
 dd8:	df 93       	push	r29
 dda:	00 d0       	rcall	.+0      	; 0xddc <execute+0x6>
 ddc:	cd b7       	in	r28, 0x3d	; 61
 dde:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i < MAX_TASKS; i++){
 de0:	1a 82       	std	Y+2, r1	; 0x02
 de2:	19 82       	std	Y+1, r1	; 0x01
 de4:	9d c0       	rjmp	.+314    	; 0xf20 <execute+0x14a>
		if(tasks[i].ready > 0){
 de6:	29 81       	ldd	r18, Y+1	; 0x01
 de8:	3a 81       	ldd	r19, Y+2	; 0x02
 dea:	c9 01       	movw	r24, r18
 dec:	88 0f       	add	r24, r24
 dee:	99 1f       	adc	r25, r25
 df0:	88 0f       	add	r24, r24
 df2:	99 1f       	adc	r25, r25
 df4:	88 0f       	add	r24, r24
 df6:	99 1f       	adc	r25, r25
 df8:	82 1b       	sub	r24, r18
 dfa:	93 0b       	sbc	r25, r19
 dfc:	8c 56       	subi	r24, 0x6C	; 108
 dfe:	9f 4f       	sbci	r25, 0xFF	; 255
 e00:	fc 01       	movw	r30, r24
 e02:	80 81       	ld	r24, Z
 e04:	88 23       	and	r24, r24
 e06:	09 f4       	brne	.+2      	; 0xe0a <execute+0x34>
 e08:	86 c0       	rjmp	.+268    	; 0xf16 <execute+0x140>
			tasks[i].t();
 e0a:	29 81       	ldd	r18, Y+1	; 0x01
 e0c:	3a 81       	ldd	r19, Y+2	; 0x02
 e0e:	c9 01       	movw	r24, r18
 e10:	88 0f       	add	r24, r24
 e12:	99 1f       	adc	r25, r25
 e14:	88 0f       	add	r24, r24
 e16:	99 1f       	adc	r25, r25
 e18:	88 0f       	add	r24, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	82 1b       	sub	r24, r18
 e1e:	93 0b       	sbc	r25, r19
 e20:	82 57       	subi	r24, 0x72	; 114
 e22:	9f 4f       	sbci	r25, 0xFF	; 255
 e24:	fc 01       	movw	r30, r24
 e26:	80 81       	ld	r24, Z
 e28:	91 81       	ldd	r25, Z+1	; 0x01
 e2a:	fc 01       	movw	r30, r24
 e2c:	09 95       	icall
			tasks[i].ready--;
 e2e:	29 81       	ldd	r18, Y+1	; 0x01
 e30:	3a 81       	ldd	r19, Y+2	; 0x02
 e32:	c9 01       	movw	r24, r18
 e34:	88 0f       	add	r24, r24
 e36:	99 1f       	adc	r25, r25
 e38:	88 0f       	add	r24, r24
 e3a:	99 1f       	adc	r25, r25
 e3c:	88 0f       	add	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	82 1b       	sub	r24, r18
 e42:	93 0b       	sbc	r25, r19
 e44:	8c 56       	subi	r24, 0x6C	; 108
 e46:	9f 4f       	sbci	r25, 0xFF	; 255
 e48:	fc 01       	movw	r30, r24
 e4a:	80 81       	ld	r24, Z
 e4c:	48 2f       	mov	r20, r24
 e4e:	41 50       	subi	r20, 0x01	; 1
 e50:	29 81       	ldd	r18, Y+1	; 0x01
 e52:	3a 81       	ldd	r19, Y+2	; 0x02
 e54:	c9 01       	movw	r24, r18
 e56:	88 0f       	add	r24, r24
 e58:	99 1f       	adc	r25, r25
 e5a:	88 0f       	add	r24, r24
 e5c:	99 1f       	adc	r25, r25
 e5e:	88 0f       	add	r24, r24
 e60:	99 1f       	adc	r25, r25
 e62:	82 1b       	sub	r24, r18
 e64:	93 0b       	sbc	r25, r19
 e66:	8c 56       	subi	r24, 0x6C	; 108
 e68:	9f 4f       	sbci	r25, 0xFF	; 255
 e6a:	fc 01       	movw	r30, r24
 e6c:	40 83       	st	Z, r20
			//usuwanie taska jesli zostal wykonany i nie jest periodyczny
			if(tasks[i].ready == 0 && tasks[i].Interval == 0){
 e6e:	29 81       	ldd	r18, Y+1	; 0x01
 e70:	3a 81       	ldd	r19, Y+2	; 0x02
 e72:	c9 01       	movw	r24, r18
 e74:	88 0f       	add	r24, r24
 e76:	99 1f       	adc	r25, r25
 e78:	88 0f       	add	r24, r24
 e7a:	99 1f       	adc	r25, r25
 e7c:	88 0f       	add	r24, r24
 e7e:	99 1f       	adc	r25, r25
 e80:	82 1b       	sub	r24, r18
 e82:	93 0b       	sbc	r25, r19
 e84:	8c 56       	subi	r24, 0x6C	; 108
 e86:	9f 4f       	sbci	r25, 0xFF	; 255
 e88:	fc 01       	movw	r30, r24
 e8a:	80 81       	ld	r24, Z
 e8c:	88 23       	and	r24, r24
 e8e:	09 f0       	breq	.+2      	; 0xe92 <execute+0xbc>
 e90:	42 c0       	rjmp	.+132    	; 0xf16 <execute+0x140>
 e92:	29 81       	ldd	r18, Y+1	; 0x01
 e94:	3a 81       	ldd	r19, Y+2	; 0x02
 e96:	c9 01       	movw	r24, r18
 e98:	88 0f       	add	r24, r24
 e9a:	99 1f       	adc	r25, r25
 e9c:	88 0f       	add	r24, r24
 e9e:	99 1f       	adc	r25, r25
 ea0:	88 0f       	add	r24, r24
 ea2:	99 1f       	adc	r25, r25
 ea4:	82 1b       	sub	r24, r18
 ea6:	93 0b       	sbc	r25, r19
 ea8:	8e 56       	subi	r24, 0x6E	; 110
 eaa:	9f 4f       	sbci	r25, 0xFF	; 255
 eac:	fc 01       	movw	r30, r24
 eae:	80 81       	ld	r24, Z
 eb0:	91 81       	ldd	r25, Z+1	; 0x01
 eb2:	00 97       	sbiw	r24, 0x00	; 0
 eb4:	81 f5       	brne	.+96     	; 0xf16 <execute+0x140>
				tasks[i].Interval = 0;
 eb6:	29 81       	ldd	r18, Y+1	; 0x01
 eb8:	3a 81       	ldd	r19, Y+2	; 0x02
 eba:	c9 01       	movw	r24, r18
 ebc:	88 0f       	add	r24, r24
 ebe:	99 1f       	adc	r25, r25
 ec0:	88 0f       	add	r24, r24
 ec2:	99 1f       	adc	r25, r25
 ec4:	88 0f       	add	r24, r24
 ec6:	99 1f       	adc	r25, r25
 ec8:	82 1b       	sub	r24, r18
 eca:	93 0b       	sbc	r25, r19
 ecc:	8e 56       	subi	r24, 0x6E	; 110
 ece:	9f 4f       	sbci	r25, 0xFF	; 255
 ed0:	fc 01       	movw	r30, r24
 ed2:	11 82       	std	Z+1, r1	; 0x01
 ed4:	10 82       	st	Z, r1
				tasks[i].ToGo = 0;
 ed6:	29 81       	ldd	r18, Y+1	; 0x01
 ed8:	3a 81       	ldd	r19, Y+2	; 0x02
 eda:	c9 01       	movw	r24, r18
 edc:	88 0f       	add	r24, r24
 ede:	99 1f       	adc	r25, r25
 ee0:	88 0f       	add	r24, r24
 ee2:	99 1f       	adc	r25, r25
 ee4:	88 0f       	add	r24, r24
 ee6:	99 1f       	adc	r25, r25
 ee8:	82 1b       	sub	r24, r18
 eea:	93 0b       	sbc	r25, r19
 eec:	80 57       	subi	r24, 0x70	; 112
 eee:	9f 4f       	sbci	r25, 0xFF	; 255
 ef0:	fc 01       	movw	r30, r24
 ef2:	11 82       	std	Z+1, r1	; 0x01
 ef4:	10 82       	st	Z, r1
				tasks[i].t = 0;
 ef6:	29 81       	ldd	r18, Y+1	; 0x01
 ef8:	3a 81       	ldd	r19, Y+2	; 0x02
 efa:	c9 01       	movw	r24, r18
 efc:	88 0f       	add	r24, r24
 efe:	99 1f       	adc	r25, r25
 f00:	88 0f       	add	r24, r24
 f02:	99 1f       	adc	r25, r25
 f04:	88 0f       	add	r24, r24
 f06:	99 1f       	adc	r25, r25
 f08:	82 1b       	sub	r24, r18
 f0a:	93 0b       	sbc	r25, r19
 f0c:	82 57       	subi	r24, 0x72	; 114
 f0e:	9f 4f       	sbci	r25, 0xFF	; 255
 f10:	fc 01       	movw	r30, r24
 f12:	11 82       	std	Z+1, r1	; 0x01
 f14:	10 82       	st	Z, r1
		}
	}
}

void execute(){
	for(int i=0; i < MAX_TASKS; i++){
 f16:	89 81       	ldd	r24, Y+1	; 0x01
 f18:	9a 81       	ldd	r25, Y+2	; 0x02
 f1a:	01 96       	adiw	r24, 0x01	; 1
 f1c:	9a 83       	std	Y+2, r25	; 0x02
 f1e:	89 83       	std	Y+1, r24	; 0x01
 f20:	89 81       	ldd	r24, Y+1	; 0x01
 f22:	9a 81       	ldd	r25, Y+2	; 0x02
 f24:	8a 30       	cpi	r24, 0x0A	; 10
 f26:	91 05       	cpc	r25, r1
 f28:	0c f4       	brge	.+2      	; 0xf2c <execute+0x156>
 f2a:	5d cf       	rjmp	.-326    	; 0xde6 <execute+0x10>
				tasks[i].ToGo = 0;
				tasks[i].t = 0;
			}
		}
	}
}
 f2c:	0f 90       	pop	r0
 f2e:	0f 90       	pop	r0
 f30:	df 91       	pop	r29
 f32:	cf 91       	pop	r28
 f34:	08 95       	ret

00000f36 <__vector_10>:


ISR(TIMER0_COMP_vect){
 f36:	1f 92       	push	r1
 f38:	0f 92       	push	r0
 f3a:	00 90 5f 00 	lds	r0, 0x005F
 f3e:	0f 92       	push	r0
 f40:	11 24       	eor	r1, r1
 f42:	2f 93       	push	r18
 f44:	3f 93       	push	r19
 f46:	4f 93       	push	r20
 f48:	5f 93       	push	r21
 f4a:	6f 93       	push	r22
 f4c:	7f 93       	push	r23
 f4e:	8f 93       	push	r24
 f50:	9f 93       	push	r25
 f52:	af 93       	push	r26
 f54:	bf 93       	push	r27
 f56:	ef 93       	push	r30
 f58:	ff 93       	push	r31
 f5a:	cf 93       	push	r28
 f5c:	df 93       	push	r29
 f5e:	cd b7       	in	r28, 0x3d	; 61
 f60:	de b7       	in	r29, 0x3e	; 62
	schedule();
 f62:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <schedule>
 f66:	df 91       	pop	r29
 f68:	cf 91       	pop	r28
 f6a:	ff 91       	pop	r31
 f6c:	ef 91       	pop	r30
 f6e:	bf 91       	pop	r27
 f70:	af 91       	pop	r26
 f72:	9f 91       	pop	r25
 f74:	8f 91       	pop	r24
 f76:	7f 91       	pop	r23
 f78:	6f 91       	pop	r22
 f7a:	5f 91       	pop	r21
 f7c:	4f 91       	pop	r20
 f7e:	3f 91       	pop	r19
 f80:	2f 91       	pop	r18
 f82:	0f 90       	pop	r0
 f84:	00 92 5f 00 	sts	0x005F, r0
 f88:	0f 90       	pop	r0
 f8a:	1f 90       	pop	r1
 f8c:	18 95       	reti

00000f8e <__divmodhi4>:
 f8e:	97 fb       	bst	r25, 7
 f90:	07 2e       	mov	r0, r23
 f92:	16 f4       	brtc	.+4      	; 0xf98 <__divmodhi4+0xa>
 f94:	00 94       	com	r0
 f96:	07 d0       	rcall	.+14     	; 0xfa6 <__divmodhi4_neg1>
 f98:	77 fd       	sbrc	r23, 7
 f9a:	09 d0       	rcall	.+18     	; 0xfae <__divmodhi4_neg2>
 f9c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__udivmodhi4>
 fa0:	07 fc       	sbrc	r0, 7
 fa2:	05 d0       	rcall	.+10     	; 0xfae <__divmodhi4_neg2>
 fa4:	3e f4       	brtc	.+14     	; 0xfb4 <__divmodhi4_exit>

00000fa6 <__divmodhi4_neg1>:
 fa6:	90 95       	com	r25
 fa8:	81 95       	neg	r24
 faa:	9f 4f       	sbci	r25, 0xFF	; 255
 fac:	08 95       	ret

00000fae <__divmodhi4_neg2>:
 fae:	70 95       	com	r23
 fb0:	61 95       	neg	r22
 fb2:	7f 4f       	sbci	r23, 0xFF	; 255

00000fb4 <__divmodhi4_exit>:
 fb4:	08 95       	ret

00000fb6 <__udivmodhi4>:
 fb6:	aa 1b       	sub	r26, r26
 fb8:	bb 1b       	sub	r27, r27
 fba:	51 e1       	ldi	r21, 0x11	; 17
 fbc:	07 c0       	rjmp	.+14     	; 0xfcc <__udivmodhi4_ep>

00000fbe <__udivmodhi4_loop>:
 fbe:	aa 1f       	adc	r26, r26
 fc0:	bb 1f       	adc	r27, r27
 fc2:	a6 17       	cp	r26, r22
 fc4:	b7 07       	cpc	r27, r23
 fc6:	10 f0       	brcs	.+4      	; 0xfcc <__udivmodhi4_ep>
 fc8:	a6 1b       	sub	r26, r22
 fca:	b7 0b       	sbc	r27, r23

00000fcc <__udivmodhi4_ep>:
 fcc:	88 1f       	adc	r24, r24
 fce:	99 1f       	adc	r25, r25
 fd0:	5a 95       	dec	r21
 fd2:	a9 f7       	brne	.-22     	; 0xfbe <__udivmodhi4_loop>
 fd4:	80 95       	com	r24
 fd6:	90 95       	com	r25
 fd8:	bc 01       	movw	r22, r24
 fda:	cd 01       	movw	r24, r26
 fdc:	08 95       	ret

00000fde <_exit>:
 fde:	f8 94       	cli

00000fe0 <__stop_program>:
 fe0:	ff cf       	rjmp	.-2      	; 0xfe0 <__stop_program>
