
DigitalClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000caa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000caa  00000d3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00800070  00800070  00000d4e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000d0  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000621  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000319  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004ac  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000280  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000520  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 03 	call	0x6a0	; 0x6a0 <main>
  8a:	0c 94 53 06 	jmp	0xca6	; 0xca6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <isPowerOfTwo>:
	PORTA = Digits[keyPressed];
	PORTB = Column[j];
	i++;
	i = i % 10;
	j++;
	j = j % 4;
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <isPowerOfTwo+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
}
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	00 97       	sbiw	r24, 0x00	; 0
int i = 0;
int j = 0;

int isPowerOfTwo(unsigned n)
{
	return n && (! (n & (n-1)) );
  a6:	71 f0       	breq	.+28     	; 0xc4 <isPowerOfTwo+0x32>
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	9c 01       	movw	r18, r24
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	31 09       	sbc	r19, r1
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	9a 81       	ldd	r25, Y+2	; 0x02
  b6:	82 23       	and	r24, r18
  b8:	93 23       	and	r25, r19
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	19 f4       	brne	.+6      	; 0xc4 <isPowerOfTwo+0x32>
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <isPowerOfTwo+0x36>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
	
}
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <findPosition>:
int findPosition(unsigned n)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	00 d0       	rcall	.+0      	; 0xd8 <findPosition+0x6>
  d8:	00 d0       	rcall	.+0      	; 0xda <findPosition+0x8>
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	8b 83       	std	Y+3, r24	; 0x03

	if (!isPowerOfTwo(n))
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	9c 81       	ldd	r25, Y+4	; 0x04
  e6:	0e 94 49 00 	call	0x92	; 0x92 <isPowerOfTwo>
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	19 f4       	brne	.+6      	; 0xf4 <findPosition+0x22>
	return 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	14 c0       	rjmp	.+40     	; 0x11c <findPosition+0x4a>
	unsigned count = 0;
  f4:	1a 82       	std	Y+2, r1	; 0x02
  f6:	19 82       	std	Y+1, r1	; 0x01

	while (n)
  f8:	0b c0       	rjmp	.+22     	; 0x110 <findPosition+0x3e>
	{
		n = n >> 1;
  fa:	8b 81       	ldd	r24, Y+3	; 0x03
  fc:	9c 81       	ldd	r25, Y+4	; 0x04
  fe:	96 95       	lsr	r25
 100:	87 95       	ror	r24
 102:	9c 83       	std	Y+4, r25	; 0x04
 104:	8b 83       	std	Y+3, r24	; 0x03
		++count;
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01

	if (!isPowerOfTwo(n))
	return 0;
	unsigned count = 0;

	while (n)
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	9c 81       	ldd	r25, Y+4	; 0x04
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	89 f7       	brne	.-30     	; 0xfa <findPosition+0x28>
	{
		n = n >> 1;
		++count;
	}
	return count;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
}
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <getKeyNumber>:


void getKeyNumber(){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	28 97       	sbiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	int i=0;
 13e:	1a 82       	std	Y+2, r1	; 0x02
 140:	19 82       	std	Y+1, r1	; 0x01
	PORTC = 0x00;
 142:	85 e3       	ldi	r24, 0x35	; 53
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	10 82       	st	Z, r1
	DDRC = 0x0F; // output dla czesci wierszy
 14a:	84 e3       	ldi	r24, 0x34	; 52
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	2f e0       	ldi	r18, 0x0F	; 15
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
	PORTC = 0xF0;
 154:	85 e3       	ldi	r24, 0x35	; 53
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	20 ef       	ldi	r18, 0xF0	; 240
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
	for(i=0;i<8;i++){}
 15e:	1a 82       	std	Y+2, r1	; 0x02
 160:	19 82       	std	Y+1, r1	; 0x01
 162:	05 c0       	rjmp	.+10     	; 0x16e <getKeyNumber+0x44>
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	91 05       	cpc	r25, r1
 176:	b4 f3       	brlt	.-20     	; 0x164 <getKeyNumber+0x3a>
	int wiersz  = findPosition((PINC ^ 0xF0)) - 4;
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	90 81       	ld	r25, Z
 180:	80 ef       	ldi	r24, 0xF0	; 240
 182:	89 27       	eor	r24, r25
 184:	88 2f       	mov	r24, r24
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 69 00 	call	0xd2	; 0xd2 <findPosition>
 18c:	04 97       	sbiw	r24, 0x04	; 4
 18e:	9e 83       	std	Y+6, r25	; 0x06
 190:	8d 83       	std	Y+5, r24	; 0x05

	PORTC = 0x00;
 192:	85 e3       	ldi	r24, 0x35	; 53
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	10 82       	st	Z, r1
	DDRC = 0xF0; //output dla czesci kolumnowej
 19a:	84 e3       	ldi	r24, 0x34	; 52
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	20 ef       	ldi	r18, 0xF0	; 240
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
	PORTC = 0x0F;
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	2f e0       	ldi	r18, 0x0F	; 15
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
	for(i=0;i<8;i++){}
 1ae:	1a 82       	std	Y+2, r1	; 0x02
 1b0:	19 82       	std	Y+1, r1	; 0x01
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <getKeyNumber+0x94>
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	9a 81       	ldd	r25, Y+2	; 0x02
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	91 05       	cpc	r25, r1
 1c6:	b4 f3       	brlt	.-20     	; 0x1b4 <getKeyNumber+0x8a>
	int kolumna = findPosition((PINC ^ 0x0F));
 1c8:	83 e3       	ldi	r24, 0x33	; 51
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	90 81       	ld	r25, Z
 1d0:	8f e0       	ldi	r24, 0x0F	; 15
 1d2:	89 27       	eor	r24, r25
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 69 00 	call	0xd2	; 0xd2 <findPosition>
 1dc:	98 87       	std	Y+8, r25	; 0x08
 1de:	8f 83       	std	Y+7, r24	; 0x07

	int liczba = ((wiersz-1) * 4) + kolumna;
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	9c 01       	movw	r18, r24
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	22 0f       	add	r18, r18
 1ee:	33 1f       	adc	r19, r19
 1f0:	8f 81       	ldd	r24, Y+7	; 0x07
 1f2:	98 85       	ldd	r25, Y+8	; 0x08
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	9c 83       	std	Y+4, r25	; 0x04
 1fa:	8b 83       	std	Y+3, r24	; 0x03
	if(liczba < 0) liczba = 0;
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	99 23       	and	r25, r25
 202:	14 f4       	brge	.+4      	; 0x208 <getKeyNumber+0xde>
 204:	1c 82       	std	Y+4, r1	; 0x04
 206:	1b 82       	std	Y+3, r1	; 0x03
	DDRA = 0xFF;
 208:	8a e3       	ldi	r24, 0x3A	; 58
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
	PORTA = 0x00;
 212:	8b e3       	ldi	r24, 0x3B	; 59
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	10 82       	st	Z, r1
	PORTA = liczba;
 21a:	8b e3       	ldi	r24, 0x3B	; 59
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2b 81       	ldd	r18, Y+3	; 0x03
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
	keyPressed = liczba;
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	9c 81       	ldd	r25, Y+4	; 0x04
 228:	90 93 71 00 	sts	0x0071, r25
 22c:	80 93 70 00 	sts	0x0070, r24
}
 230:	28 96       	adiw	r28, 0x08	; 8
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <changeMode>:

void changeMode(){
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	if(keyPressed == 1){
 24a:	80 91 70 00 	lds	r24, 0x0070
 24e:	90 91 71 00 	lds	r25, 0x0071
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	91 05       	cpc	r25, r1
 256:	c9 f4       	brne	.+50     	; 0x28a <changeMode+0x48>
		displayMode++;
 258:	80 91 60 00 	lds	r24, 0x0060
 25c:	90 91 61 00 	lds	r25, 0x0061
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 61 00 	sts	0x0061, r25
 266:	80 93 60 00 	sts	0x0060, r24
		displayMode = displayMode % 2;
 26a:	80 91 60 00 	lds	r24, 0x0060
 26e:	90 91 61 00 	lds	r25, 0x0061
 272:	81 70       	andi	r24, 0x01	; 1
 274:	90 78       	andi	r25, 0x80	; 128
 276:	99 23       	and	r25, r25
 278:	24 f4       	brge	.+8      	; 0x282 <changeMode+0x40>
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	8e 6f       	ori	r24, 0xFE	; 254
 27e:	9f 6f       	ori	r25, 0xFF	; 255
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 61 00 	sts	0x0061, r25
 286:	80 93 60 00 	sts	0x0060, r24
	}
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <displayMinutesAndSeconds>:
	j = j % 4;
}



void displayMinutesAndSeconds(){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	28 97       	sbiw	r28, 0x08	; 8
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
	PORTB = 0xFF;
 2a4:	88 e3       	ldi	r24, 0x38	; 56
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
	int dec = seconds / 10;
 2ae:	80 91 72 00 	lds	r24, 0x0072
 2b2:	90 91 73 00 	lds	r25, 0x0073
 2b6:	2a e0       	ldi	r18, 0x0A	; 10
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	b9 01       	movw	r22, r18
 2bc:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 2c0:	9b 01       	movw	r18, r22
 2c2:	3a 83       	std	Y+2, r19	; 0x02
 2c4:	29 83       	std	Y+1, r18	; 0x01
	int one = seconds % 10;
 2c6:	80 91 72 00 	lds	r24, 0x0072
 2ca:	90 91 73 00 	lds	r25, 0x0073
 2ce:	2a e0       	ldi	r18, 0x0A	; 10
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	b9 01       	movw	r22, r18
 2d4:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 2d8:	9c 83       	std	Y+4, r25	; 0x04
 2da:	8b 83       	std	Y+3, r24	; 0x03
	int minDec = minutes / 10;
 2dc:	80 91 74 00 	lds	r24, 0x0074
 2e0:	90 91 75 00 	lds	r25, 0x0075
 2e4:	2a e0       	ldi	r18, 0x0A	; 10
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 2ee:	9b 01       	movw	r18, r22
 2f0:	3e 83       	std	Y+6, r19	; 0x06
 2f2:	2d 83       	std	Y+5, r18	; 0x05
	int minOne = minutes % 10;
 2f4:	80 91 74 00 	lds	r24, 0x0074
 2f8:	90 91 75 00 	lds	r25, 0x0075
 2fc:	2a e0       	ldi	r18, 0x0A	; 10
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	b9 01       	movw	r22, r18
 302:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 306:	98 87       	std	Y+8, r25	; 0x08
 308:	8f 83       	std	Y+7, r24	; 0x07
	if(j == 0){
 30a:	80 91 7a 00 	lds	r24, 0x007A
 30e:	90 91 7b 00 	lds	r25, 0x007B
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	89 f4       	brne	.+34     	; 0x338 <displayMinutesAndSeconds+0xa8>
		PORTB = Column[0];
 316:	88 e3       	ldi	r24, 0x38	; 56
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	20 91 6c 00 	lds	r18, 0x006C
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
		PORTA = Digits[one];
 322:	8b e3       	ldi	r24, 0x3B	; 59
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	2b 81       	ldd	r18, Y+3	; 0x03
 328:	3c 81       	ldd	r19, Y+4	; 0x04
 32a:	2e 59       	subi	r18, 0x9E	; 158
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
 336:	47 c0       	rjmp	.+142    	; 0x3c6 <displayMinutesAndSeconds+0x136>
	}
	else if(j == 1){
 338:	80 91 7a 00 	lds	r24, 0x007A
 33c:	90 91 7b 00 	lds	r25, 0x007B
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	91 05       	cpc	r25, r1
 344:	89 f4       	brne	.+34     	; 0x368 <displayMinutesAndSeconds+0xd8>
		PORTB = Column[1];
 346:	88 e3       	ldi	r24, 0x38	; 56
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	20 91 6d 00 	lds	r18, 0x006D
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
		PORTA = Digits[dec];
 352:	8b e3       	ldi	r24, 0x3B	; 59
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	29 81       	ldd	r18, Y+1	; 0x01
 358:	3a 81       	ldd	r19, Y+2	; 0x02
 35a:	2e 59       	subi	r18, 0x9E	; 158
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	f9 01       	movw	r30, r18
 360:	20 81       	ld	r18, Z
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
 366:	2f c0       	rjmp	.+94     	; 0x3c6 <displayMinutesAndSeconds+0x136>
	}
	else if(j == 2){
 368:	80 91 7a 00 	lds	r24, 0x007A
 36c:	90 91 7b 00 	lds	r25, 0x007B
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	91 05       	cpc	r25, r1
 374:	89 f4       	brne	.+34     	; 0x398 <displayMinutesAndSeconds+0x108>
		PORTB = Column[2];
 376:	88 e3       	ldi	r24, 0x38	; 56
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	20 91 6e 00 	lds	r18, 0x006E
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
		PORTA = Digits[minOne];
 382:	8b e3       	ldi	r24, 0x3B	; 59
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	2f 81       	ldd	r18, Y+7	; 0x07
 388:	38 85       	ldd	r19, Y+8	; 0x08
 38a:	2e 59       	subi	r18, 0x9E	; 158
 38c:	3f 4f       	sbci	r19, 0xFF	; 255
 38e:	f9 01       	movw	r30, r18
 390:	20 81       	ld	r18, Z
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18
 396:	17 c0       	rjmp	.+46     	; 0x3c6 <displayMinutesAndSeconds+0x136>
	}
	else if(j == 3){
 398:	80 91 7a 00 	lds	r24, 0x007A
 39c:	90 91 7b 00 	lds	r25, 0x007B
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	91 05       	cpc	r25, r1
 3a4:	81 f4       	brne	.+32     	; 0x3c6 <displayMinutesAndSeconds+0x136>
		PORTB = Column[3];
 3a6:	88 e3       	ldi	r24, 0x38	; 56
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	20 91 6f 00 	lds	r18, 0x006F
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 83       	st	Z, r18
		PORTA = Digits[minDec];
 3b2:	8b e3       	ldi	r24, 0x3B	; 59
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	2d 81       	ldd	r18, Y+5	; 0x05
 3b8:	3e 81       	ldd	r19, Y+6	; 0x06
 3ba:	2e 59       	subi	r18, 0x9E	; 158
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
	}

	i++;
 3c6:	80 91 78 00 	lds	r24, 0x0078
 3ca:	90 91 79 00 	lds	r25, 0x0079
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	90 93 79 00 	sts	0x0079, r25
 3d4:	80 93 78 00 	sts	0x0078, r24
	i = i % 10;
 3d8:	80 91 78 00 	lds	r24, 0x0078
 3dc:	90 91 79 00 	lds	r25, 0x0079
 3e0:	2a e0       	ldi	r18, 0x0A	; 10
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	b9 01       	movw	r22, r18
 3e6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 3ea:	90 93 79 00 	sts	0x0079, r25
 3ee:	80 93 78 00 	sts	0x0078, r24
	j++;
 3f2:	80 91 7a 00 	lds	r24, 0x007A
 3f6:	90 91 7b 00 	lds	r25, 0x007B
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	90 93 7b 00 	sts	0x007B, r25
 400:	80 93 7a 00 	sts	0x007A, r24
	j = j % 4;
 404:	80 91 7a 00 	lds	r24, 0x007A
 408:	90 91 7b 00 	lds	r25, 0x007B
 40c:	83 70       	andi	r24, 0x03	; 3
 40e:	90 78       	andi	r25, 0x80	; 128
 410:	99 23       	and	r25, r25
 412:	24 f4       	brge	.+8      	; 0x41c <displayMinutesAndSeconds+0x18c>
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	8c 6f       	ori	r24, 0xFC	; 252
 418:	9f 6f       	ori	r25, 0xFF	; 255
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 7b 00 	sts	0x007B, r25
 420:	80 93 7a 00 	sts	0x007A, r24
}
 424:	28 96       	adiw	r28, 0x08	; 8
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <displayHoursAndMinutes>:

void displayHoursAndMinutes(){
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	28 97       	sbiw	r28, 0x08	; 8
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
	PORTB = 0xFF;
 44a:	88 e3       	ldi	r24, 0x38	; 56
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	2f ef       	ldi	r18, 0xFF	; 255
 450:	fc 01       	movw	r30, r24
 452:	20 83       	st	Z, r18
	int dec = minutes / 10;
 454:	80 91 74 00 	lds	r24, 0x0074
 458:	90 91 75 00 	lds	r25, 0x0075
 45c:	2a e0       	ldi	r18, 0x0A	; 10
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	b9 01       	movw	r22, r18
 462:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 466:	9b 01       	movw	r18, r22
 468:	3a 83       	std	Y+2, r19	; 0x02
 46a:	29 83       	std	Y+1, r18	; 0x01
	int one = minutes % 10;
 46c:	80 91 74 00 	lds	r24, 0x0074
 470:	90 91 75 00 	lds	r25, 0x0075
 474:	2a e0       	ldi	r18, 0x0A	; 10
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	b9 01       	movw	r22, r18
 47a:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 47e:	9c 83       	std	Y+4, r25	; 0x04
 480:	8b 83       	std	Y+3, r24	; 0x03
	int HrsDec = hours / 10;
 482:	80 91 76 00 	lds	r24, 0x0076
 486:	90 91 77 00 	lds	r25, 0x0077
 48a:	2a e0       	ldi	r18, 0x0A	; 10
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	b9 01       	movw	r22, r18
 490:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 494:	9b 01       	movw	r18, r22
 496:	3e 83       	std	Y+6, r19	; 0x06
 498:	2d 83       	std	Y+5, r18	; 0x05
	int HrsOne = hours % 10;
 49a:	80 91 76 00 	lds	r24, 0x0076
 49e:	90 91 77 00 	lds	r25, 0x0077
 4a2:	2a e0       	ldi	r18, 0x0A	; 10
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 4ac:	98 87       	std	Y+8, r25	; 0x08
 4ae:	8f 83       	std	Y+7, r24	; 0x07
	if(j == 0){
 4b0:	80 91 7a 00 	lds	r24, 0x007A
 4b4:	90 91 7b 00 	lds	r25, 0x007B
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	89 f4       	brne	.+34     	; 0x4de <displayHoursAndMinutes+0xa8>
		PORTB = Column[0];
 4bc:	88 e3       	ldi	r24, 0x38	; 56
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	20 91 6c 00 	lds	r18, 0x006C
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
		PORTA = Digits[one];
 4c8:	8b e3       	ldi	r24, 0x3B	; 59
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	2b 81       	ldd	r18, Y+3	; 0x03
 4ce:	3c 81       	ldd	r19, Y+4	; 0x04
 4d0:	2e 59       	subi	r18, 0x9E	; 158
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	f9 01       	movw	r30, r18
 4d6:	20 81       	ld	r18, Z
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
 4dc:	47 c0       	rjmp	.+142    	; 0x56c <displayHoursAndMinutes+0x136>
	}
	else if(j == 1){
 4de:	80 91 7a 00 	lds	r24, 0x007A
 4e2:	90 91 7b 00 	lds	r25, 0x007B
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	91 05       	cpc	r25, r1
 4ea:	89 f4       	brne	.+34     	; 0x50e <displayHoursAndMinutes+0xd8>
		PORTB = Column[1];
 4ec:	88 e3       	ldi	r24, 0x38	; 56
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	20 91 6d 00 	lds	r18, 0x006D
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
		PORTA = Digits[dec];
 4f8:	8b e3       	ldi	r24, 0x3B	; 59
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	29 81       	ldd	r18, Y+1	; 0x01
 4fe:	3a 81       	ldd	r19, Y+2	; 0x02
 500:	2e 59       	subi	r18, 0x9E	; 158
 502:	3f 4f       	sbci	r19, 0xFF	; 255
 504:	f9 01       	movw	r30, r18
 506:	20 81       	ld	r18, Z
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
 50c:	2f c0       	rjmp	.+94     	; 0x56c <displayHoursAndMinutes+0x136>
	}
	else if(j == 2){
 50e:	80 91 7a 00 	lds	r24, 0x007A
 512:	90 91 7b 00 	lds	r25, 0x007B
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	91 05       	cpc	r25, r1
 51a:	89 f4       	brne	.+34     	; 0x53e <displayHoursAndMinutes+0x108>
		PORTB = Column[2];
 51c:	88 e3       	ldi	r24, 0x38	; 56
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	20 91 6e 00 	lds	r18, 0x006E
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18
		PORTA = Digits[HrsOne];
 528:	8b e3       	ldi	r24, 0x3B	; 59
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	2f 81       	ldd	r18, Y+7	; 0x07
 52e:	38 85       	ldd	r19, Y+8	; 0x08
 530:	2e 59       	subi	r18, 0x9E	; 158
 532:	3f 4f       	sbci	r19, 0xFF	; 255
 534:	f9 01       	movw	r30, r18
 536:	20 81       	ld	r18, Z
 538:	fc 01       	movw	r30, r24
 53a:	20 83       	st	Z, r18
 53c:	17 c0       	rjmp	.+46     	; 0x56c <displayHoursAndMinutes+0x136>
	}
	else if(j == 3){
 53e:	80 91 7a 00 	lds	r24, 0x007A
 542:	90 91 7b 00 	lds	r25, 0x007B
 546:	83 30       	cpi	r24, 0x03	; 3
 548:	91 05       	cpc	r25, r1
 54a:	81 f4       	brne	.+32     	; 0x56c <displayHoursAndMinutes+0x136>
		PORTB = Column[3];
 54c:	88 e3       	ldi	r24, 0x38	; 56
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	20 91 6f 00 	lds	r18, 0x006F
 554:	fc 01       	movw	r30, r24
 556:	20 83       	st	Z, r18
		PORTA = Digits[HrsDec];
 558:	8b e3       	ldi	r24, 0x3B	; 59
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	2d 81       	ldd	r18, Y+5	; 0x05
 55e:	3e 81       	ldd	r19, Y+6	; 0x06
 560:	2e 59       	subi	r18, 0x9E	; 158
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	f9 01       	movw	r30, r18
 566:	20 81       	ld	r18, Z
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
	}

	i++;
 56c:	80 91 78 00 	lds	r24, 0x0078
 570:	90 91 79 00 	lds	r25, 0x0079
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	90 93 79 00 	sts	0x0079, r25
 57a:	80 93 78 00 	sts	0x0078, r24
	i = i % 10;
 57e:	80 91 78 00 	lds	r24, 0x0078
 582:	90 91 79 00 	lds	r25, 0x0079
 586:	2a e0       	ldi	r18, 0x0A	; 10
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	b9 01       	movw	r22, r18
 58c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 590:	90 93 79 00 	sts	0x0079, r25
 594:	80 93 78 00 	sts	0x0078, r24
	j++;
 598:	80 91 7a 00 	lds	r24, 0x007A
 59c:	90 91 7b 00 	lds	r25, 0x007B
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	90 93 7b 00 	sts	0x007B, r25
 5a6:	80 93 7a 00 	sts	0x007A, r24
	j = j % 4;
 5aa:	80 91 7a 00 	lds	r24, 0x007A
 5ae:	90 91 7b 00 	lds	r25, 0x007B
 5b2:	83 70       	andi	r24, 0x03	; 3
 5b4:	90 78       	andi	r25, 0x80	; 128
 5b6:	99 23       	and	r25, r25
 5b8:	24 f4       	brge	.+8      	; 0x5c2 <displayHoursAndMinutes+0x18c>
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	8c 6f       	ori	r24, 0xFC	; 252
 5be:	9f 6f       	ori	r25, 0xFF	; 255
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	90 93 7b 00 	sts	0x007B, r25
 5c6:	80 93 7a 00 	sts	0x007A, r24
}
 5ca:	28 96       	adiw	r28, 0x08	; 8
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <displayClock>:

void displayClock(){
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
	if(displayMode == 1){
 5e4:	80 91 60 00 	lds	r24, 0x0060
 5e8:	90 91 61 00 	lds	r25, 0x0061
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	91 05       	cpc	r25, r1
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <displayClock+0x1a>
		displayMinutesAndSeconds();
 5f2:	0e 94 48 01 	call	0x290	; 0x290 <displayMinutesAndSeconds>
	}
	if(displayMode == 0){
 5f6:	80 91 60 00 	lds	r24, 0x0060
 5fa:	90 91 61 00 	lds	r25, 0x0061
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	11 f4       	brne	.+4      	; 0x606 <displayClock+0x2a>
		displayHoursAndMinutes();
 602:	0e 94 1b 02 	call	0x436	; 0x436 <displayHoursAndMinutes>
	}
}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <manageClock>:

void manageClock(){
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
	seconds++;
 614:	80 91 72 00 	lds	r24, 0x0072
 618:	90 91 73 00 	lds	r25, 0x0073
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	90 93 73 00 	sts	0x0073, r25
 622:	80 93 72 00 	sts	0x0072, r24
	if(seconds > 59){
 626:	80 91 72 00 	lds	r24, 0x0072
 62a:	90 91 73 00 	lds	r25, 0x0073
 62e:	8c 33       	cpi	r24, 0x3C	; 60
 630:	91 05       	cpc	r25, r1
 632:	b4 f0       	brlt	.+44     	; 0x660 <manageClock+0x54>
		minutes++;
 634:	80 91 74 00 	lds	r24, 0x0074
 638:	90 91 75 00 	lds	r25, 0x0075
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	90 93 75 00 	sts	0x0075, r25
 642:	80 93 74 00 	sts	0x0074, r24
		seconds = seconds % 60;
 646:	80 91 72 00 	lds	r24, 0x0072
 64a:	90 91 73 00 	lds	r25, 0x0073
 64e:	2c e3       	ldi	r18, 0x3C	; 60
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	b9 01       	movw	r22, r18
 654:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 658:	90 93 73 00 	sts	0x0073, r25
 65c:	80 93 72 00 	sts	0x0072, r24
	}
	if(minutes > 59){
 660:	80 91 74 00 	lds	r24, 0x0074
 664:	90 91 75 00 	lds	r25, 0x0075
 668:	8c 33       	cpi	r24, 0x3C	; 60
 66a:	91 05       	cpc	r25, r1
 66c:	b4 f0       	brlt	.+44     	; 0x69a <manageClock+0x8e>
		hours++;
 66e:	80 91 76 00 	lds	r24, 0x0076
 672:	90 91 77 00 	lds	r25, 0x0077
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	90 93 77 00 	sts	0x0077, r25
 67c:	80 93 76 00 	sts	0x0076, r24
		minutes = minutes % 60;
 680:	80 91 74 00 	lds	r24, 0x0074
 684:	90 91 75 00 	lds	r25, 0x0075
 688:	2c e3       	ldi	r18, 0x3C	; 60
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	b9 01       	movw	r22, r18
 68e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 692:	90 93 75 00 	sts	0x0075, r25
 696:	80 93 74 00 	sts	0x0074, r24
	}
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <main>:
#include "Scheduler.h"
#include "Clock.h"


int main(void)
{
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62


        init();
 6a8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <init>
		initCounter();
 6ac:	0e 94 cb 03 	call	0x796	; 0x796 <initCounter>

        addTask(getKeyNumber, 1000);
 6b0:	68 ee       	ldi	r22, 0xE8	; 232
 6b2:	73 e0       	ldi	r23, 0x03	; 3
 6b4:	85 e9       	ldi	r24, 0x95	; 149
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <addTask>
        addTask(manageClock, 1000);
 6bc:	68 ee       	ldi	r22, 0xE8	; 232
 6be:	73 e0       	ldi	r23, 0x03	; 3
 6c0:	86 e0       	ldi	r24, 0x06	; 6
 6c2:	93 e0       	ldi	r25, 0x03	; 3
 6c4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <addTask>
        addTask(displayClock, 5);
 6c8:	65 e0       	ldi	r22, 0x05	; 5
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	8e ee       	ldi	r24, 0xEE	; 238
 6ce:	92 e0       	ldi	r25, 0x02	; 2
 6d0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <addTask>
        addTask(changeMode, 1000);
 6d4:	68 ee       	ldi	r22, 0xE8	; 232
 6d6:	73 e0       	ldi	r23, 0x03	; 3
 6d8:	81 e2       	ldi	r24, 0x21	; 33
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <addTask>
        sei();
 6e0:	78 94       	sei
        while(1){
                execute();
 6e2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <execute>
        }
 6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <main+0x42>

000006e8 <init>:

#include "Scheduler.h"

int tasks_num = 0;

void init(){
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <init+0x6>
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62

	for(int i = 0; i < MAX_TASKS; i++){
 6f2:	1a 82       	std	Y+2, r1	; 0x02
 6f4:	19 82       	std	Y+1, r1	; 0x01
 6f6:	44 c0       	rjmp	.+136    	; 0x780 <init+0x98>
		tasks[i].Interval = 0;
 6f8:	29 81       	ldd	r18, Y+1	; 0x01
 6fa:	3a 81       	ldd	r19, Y+2	; 0x02
 6fc:	c9 01       	movw	r24, r18
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	82 1b       	sub	r24, r18
 70c:	93 0b       	sbc	r25, r19
 70e:	8e 57       	subi	r24, 0x7E	; 126
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	fc 01       	movw	r30, r24
 714:	11 82       	std	Z+1, r1	; 0x01
 716:	10 82       	st	Z, r1
		tasks[i].ready = 0;
 718:	29 81       	ldd	r18, Y+1	; 0x01
 71a:	3a 81       	ldd	r19, Y+2	; 0x02
 71c:	c9 01       	movw	r24, r18
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	82 1b       	sub	r24, r18
 72c:	93 0b       	sbc	r25, r19
 72e:	8c 57       	subi	r24, 0x7C	; 124
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	fc 01       	movw	r30, r24
 734:	10 82       	st	Z, r1
		tasks[i].t = 0;
 736:	29 81       	ldd	r18, Y+1	; 0x01
 738:	3a 81       	ldd	r19, Y+2	; 0x02
 73a:	c9 01       	movw	r24, r18
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	82 1b       	sub	r24, r18
 74a:	93 0b       	sbc	r25, r19
 74c:	82 58       	subi	r24, 0x82	; 130
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	fc 01       	movw	r30, r24
 752:	11 82       	std	Z+1, r1	; 0x01
 754:	10 82       	st	Z, r1
		tasks[i].ToGo = 0;
 756:	29 81       	ldd	r18, Y+1	; 0x01
 758:	3a 81       	ldd	r19, Y+2	; 0x02
 75a:	c9 01       	movw	r24, r18
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	82 1b       	sub	r24, r18
 76a:	93 0b       	sbc	r25, r19
 76c:	80 58       	subi	r24, 0x80	; 128
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	fc 01       	movw	r30, r24
 772:	11 82       	std	Z+1, r1	; 0x01
 774:	10 82       	st	Z, r1

int tasks_num = 0;

void init(){

	for(int i = 0; i < MAX_TASKS; i++){
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	9a 81       	ldd	r25, Y+2	; 0x02
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	9a 83       	std	Y+2, r25	; 0x02
 77e:	89 83       	std	Y+1, r24	; 0x01
 780:	89 81       	ldd	r24, Y+1	; 0x01
 782:	9a 81       	ldd	r25, Y+2	; 0x02
 784:	8a 30       	cpi	r24, 0x0A	; 10
 786:	91 05       	cpc	r25, r1
 788:	0c f4       	brge	.+2      	; 0x78c <init+0xa4>
 78a:	b6 cf       	rjmp	.-148    	; 0x6f8 <init+0x10>
		tasks[i].Interval = 0;
		tasks[i].ready = 0;
		tasks[i].t = 0;
		tasks[i].ToGo = 0;
	}
}
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <initCounter>:

void initCounter(){
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
		// prescaler na 64
		OCR0 = 250;
 79e:	8c e5       	ldi	r24, 0x5C	; 92
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	2a ef       	ldi	r18, 0xFA	; 250
 7a4:	fc 01       	movw	r30, r24
 7a6:	20 83       	st	Z, r18
		TCCR0 |= (0 << WGM00) | (1 << WGM01) | (0 << CS02) | (1 << CS01) | (1 << CS00) | (0 << COM01) | (0 << COM00);
 7a8:	83 e5       	ldi	r24, 0x53	; 83
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	23 e5       	ldi	r18, 0x53	; 83
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	f9 01       	movw	r30, r18
 7b2:	20 81       	ld	r18, Z
 7b4:	2b 60       	ori	r18, 0x0B	; 11
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 83       	st	Z, r18
		TIMSK |= (1 << TOIE0) | (1 << OCIE0);
 7ba:	89 e5       	ldi	r24, 0x59	; 89
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	29 e5       	ldi	r18, 0x59	; 89
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	f9 01       	movw	r30, r18
 7c4:	20 81       	ld	r18, Z
 7c6:	23 60       	ori	r18, 0x03	; 3
 7c8:	fc 01       	movw	r30, r24
 7ca:	20 83       	st	Z, r18

		DDRA = 0xFF;
 7cc:	8a e3       	ldi	r24, 0x3A	; 58
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	2f ef       	ldi	r18, 0xFF	; 255
 7d2:	fc 01       	movw	r30, r24
 7d4:	20 83       	st	Z, r18
		DDRB = 0xFF;
 7d6:	87 e3       	ldi	r24, 0x37	; 55
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	2f ef       	ldi	r18, 0xFF	; 255
 7dc:	fc 01       	movw	r30, r24
 7de:	20 83       	st	Z, r18
		PORTC = 0b000000100;
 7e0:	85 e3       	ldi	r24, 0x35	; 53
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	24 e0       	ldi	r18, 0x04	; 4
 7e6:	fc 01       	movw	r30, r24
 7e8:	20 83       	st	Z, r18
}
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	08 95       	ret

000007f0 <addTask>:

void addTask(TASK_PTR task, uint16_t period){
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	00 d0       	rcall	.+0      	; 0x7f6 <addTask+0x6>
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <addTask+0x8>
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	9a 83       	std	Y+2, r25	; 0x02
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	7c 83       	std	Y+4, r23	; 0x04
 802:	6b 83       	std	Y+3, r22	; 0x03
	if(tasks_num < MAX_TASKS){
 804:	80 91 7c 00 	lds	r24, 0x007C
 808:	90 91 7d 00 	lds	r25, 0x007D
 80c:	8a 30       	cpi	r24, 0x0A	; 10
 80e:	91 05       	cpc	r25, r1
 810:	0c f0       	brlt	.+2      	; 0x814 <addTask+0x24>
 812:	45 c0       	rjmp	.+138    	; 0x89e <__stack+0x3f>
		tasks[tasks_num].Interval = period;
 814:	20 91 7c 00 	lds	r18, 0x007C
 818:	30 91 7d 00 	lds	r19, 0x007D
 81c:	c9 01       	movw	r24, r18
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	82 1b       	sub	r24, r18
 82c:	93 0b       	sbc	r25, r19
 82e:	8e 57       	subi	r24, 0x7E	; 126
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	2b 81       	ldd	r18, Y+3	; 0x03
 834:	3c 81       	ldd	r19, Y+4	; 0x04
 836:	fc 01       	movw	r30, r24
 838:	31 83       	std	Z+1, r19	; 0x01
 83a:	20 83       	st	Z, r18
		tasks[tasks_num].ToGo = period;
 83c:	20 91 7c 00 	lds	r18, 0x007C
 840:	30 91 7d 00 	lds	r19, 0x007D
 844:	c9 01       	movw	r24, r18
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	82 1b       	sub	r24, r18
 854:	93 0b       	sbc	r25, r19
 856:	80 58       	subi	r24, 0x80	; 128
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	2b 81       	ldd	r18, Y+3	; 0x03
 85c:	3c 81       	ldd	r19, Y+4	; 0x04
 85e:	fc 01       	movw	r30, r24
 860:	31 83       	std	Z+1, r19	; 0x01
 862:	20 83       	st	Z, r18
		tasks[tasks_num].t = task;
 864:	20 91 7c 00 	lds	r18, 0x007C
 868:	30 91 7d 00 	lds	r19, 0x007D
 86c:	c9 01       	movw	r24, r18
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	82 1b       	sub	r24, r18
 87c:	93 0b       	sbc	r25, r19
 87e:	82 58       	subi	r24, 0x82	; 130
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	29 81       	ldd	r18, Y+1	; 0x01
 884:	3a 81       	ldd	r19, Y+2	; 0x02
 886:	fc 01       	movw	r30, r24
 888:	31 83       	std	Z+1, r19	; 0x01
 88a:	20 83       	st	Z, r18
		tasks_num++;
 88c:	80 91 7c 00 	lds	r24, 0x007C
 890:	90 91 7d 00 	lds	r25, 0x007D
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	90 93 7d 00 	sts	0x007D, r25
 89a:	80 93 7c 00 	sts	0x007C, r24
	}
}
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <schedule>:
		tasks_num++;
	}
}

//wykonywana w przerwaniu
void schedule(){
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29
 8b0:	00 d0       	rcall	.+0      	; 0x8b2 <schedule+0x6>
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
	//int i = 0;
	for(int i = 0; i < MAX_TASKS; i++){
 8b6:	1a 82       	std	Y+2, r1	; 0x02
 8b8:	19 82       	std	Y+1, r1	; 0x01
 8ba:	e6 c0       	rjmp	.+460    	; 0xa88 <schedule+0x1dc>
		//jesli task nie jest pusty zmiejszamy ToGo
		if(tasks[i].t != 0){
 8bc:	29 81       	ldd	r18, Y+1	; 0x01
 8be:	3a 81       	ldd	r19, Y+2	; 0x02
 8c0:	c9 01       	movw	r24, r18
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	82 1b       	sub	r24, r18
 8d0:	93 0b       	sbc	r25, r19
 8d2:	82 58       	subi	r24, 0x82	; 130
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	fc 01       	movw	r30, r24
 8d8:	80 81       	ld	r24, Z
 8da:	91 81       	ldd	r25, Z+1	; 0x01
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	09 f4       	brne	.+2      	; 0x8e2 <schedule+0x36>
 8e0:	ce c0       	rjmp	.+412    	; 0xa7e <schedule+0x1d2>
			tasks[i].ToGo--;
 8e2:	29 81       	ldd	r18, Y+1	; 0x01
 8e4:	3a 81       	ldd	r19, Y+2	; 0x02
 8e6:	c9 01       	movw	r24, r18
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	82 1b       	sub	r24, r18
 8f6:	93 0b       	sbc	r25, r19
 8f8:	80 58       	subi	r24, 0x80	; 128
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	fc 01       	movw	r30, r24
 8fe:	80 81       	ld	r24, Z
 900:	91 81       	ldd	r25, Z+1	; 0x01
 902:	ac 01       	movw	r20, r24
 904:	41 50       	subi	r20, 0x01	; 1
 906:	51 09       	sbc	r21, r1
 908:	29 81       	ldd	r18, Y+1	; 0x01
 90a:	3a 81       	ldd	r19, Y+2	; 0x02
 90c:	c9 01       	movw	r24, r18
 90e:	88 0f       	add	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	88 0f       	add	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	82 1b       	sub	r24, r18
 91c:	93 0b       	sbc	r25, r19
 91e:	80 58       	subi	r24, 0x80	; 128
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	fc 01       	movw	r30, r24
 924:	51 83       	std	Z+1, r21	; 0x01
 926:	40 83       	st	Z, r20
			//jesli ToGo = 0 zwiekszamy ready (periodyczny)
			if(tasks[i].ToGo == 0 && tasks[i].Interval != 0){
 928:	29 81       	ldd	r18, Y+1	; 0x01
 92a:	3a 81       	ldd	r19, Y+2	; 0x02
 92c:	c9 01       	movw	r24, r18
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	82 1b       	sub	r24, r18
 93c:	93 0b       	sbc	r25, r19
 93e:	80 58       	subi	r24, 0x80	; 128
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	fc 01       	movw	r30, r24
 944:	80 81       	ld	r24, Z
 946:	91 81       	ldd	r25, Z+1	; 0x01
 948:	00 97       	sbiw	r24, 0x00	; 0
 94a:	09 f0       	breq	.+2      	; 0x94e <schedule+0xa2>
 94c:	54 c0       	rjmp	.+168    	; 0x9f6 <schedule+0x14a>
 94e:	29 81       	ldd	r18, Y+1	; 0x01
 950:	3a 81       	ldd	r19, Y+2	; 0x02
 952:	c9 01       	movw	r24, r18
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	88 0f       	add	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	82 1b       	sub	r24, r18
 962:	93 0b       	sbc	r25, r19
 964:	8e 57       	subi	r24, 0x7E	; 126
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	fc 01       	movw	r30, r24
 96a:	80 81       	ld	r24, Z
 96c:	91 81       	ldd	r25, Z+1	; 0x01
 96e:	00 97       	sbiw	r24, 0x00	; 0
 970:	09 f4       	brne	.+2      	; 0x974 <schedule+0xc8>
 972:	41 c0       	rjmp	.+130    	; 0x9f6 <schedule+0x14a>
				tasks[i].ready++;
 974:	29 81       	ldd	r18, Y+1	; 0x01
 976:	3a 81       	ldd	r19, Y+2	; 0x02
 978:	c9 01       	movw	r24, r18
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	88 0f       	add	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	88 0f       	add	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	82 1b       	sub	r24, r18
 988:	93 0b       	sbc	r25, r19
 98a:	8c 57       	subi	r24, 0x7C	; 124
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	fc 01       	movw	r30, r24
 990:	80 81       	ld	r24, Z
 992:	48 2f       	mov	r20, r24
 994:	4f 5f       	subi	r20, 0xFF	; 255
 996:	29 81       	ldd	r18, Y+1	; 0x01
 998:	3a 81       	ldd	r19, Y+2	; 0x02
 99a:	c9 01       	movw	r24, r18
 99c:	88 0f       	add	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	82 1b       	sub	r24, r18
 9aa:	93 0b       	sbc	r25, r19
 9ac:	8c 57       	subi	r24, 0x7C	; 124
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	fc 01       	movw	r30, r24
 9b2:	40 83       	st	Z, r20
				tasks[i].ToGo = tasks[i].Interval;
 9b4:	29 81       	ldd	r18, Y+1	; 0x01
 9b6:	3a 81       	ldd	r19, Y+2	; 0x02
 9b8:	c9 01       	movw	r24, r18
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	82 1b       	sub	r24, r18
 9c8:	93 0b       	sbc	r25, r19
 9ca:	8e 57       	subi	r24, 0x7E	; 126
 9cc:	9f 4f       	sbci	r25, 0xFF	; 255
 9ce:	fc 01       	movw	r30, r24
 9d0:	40 81       	ld	r20, Z
 9d2:	51 81       	ldd	r21, Z+1	; 0x01
 9d4:	29 81       	ldd	r18, Y+1	; 0x01
 9d6:	3a 81       	ldd	r19, Y+2	; 0x02
 9d8:	c9 01       	movw	r24, r18
 9da:	88 0f       	add	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	88 0f       	add	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	82 1b       	sub	r24, r18
 9e8:	93 0b       	sbc	r25, r19
 9ea:	80 58       	subi	r24, 0x80	; 128
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	fc 01       	movw	r30, r24
 9f0:	51 83       	std	Z+1, r21	; 0x01
 9f2:	40 83       	st	Z, r20
 9f4:	44 c0       	rjmp	.+136    	; 0xa7e <schedule+0x1d2>
			}
			//(nie jest periodyczny)
			else if(tasks[i].ToGo == 0 && tasks[i].Interval == 0){
 9f6:	29 81       	ldd	r18, Y+1	; 0x01
 9f8:	3a 81       	ldd	r19, Y+2	; 0x02
 9fa:	c9 01       	movw	r24, r18
 9fc:	88 0f       	add	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	82 1b       	sub	r24, r18
 a0a:	93 0b       	sbc	r25, r19
 a0c:	80 58       	subi	r24, 0x80	; 128
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	fc 01       	movw	r30, r24
 a12:	80 81       	ld	r24, Z
 a14:	91 81       	ldd	r25, Z+1	; 0x01
 a16:	00 97       	sbiw	r24, 0x00	; 0
 a18:	91 f5       	brne	.+100    	; 0xa7e <schedule+0x1d2>
 a1a:	29 81       	ldd	r18, Y+1	; 0x01
 a1c:	3a 81       	ldd	r19, Y+2	; 0x02
 a1e:	c9 01       	movw	r24, r18
 a20:	88 0f       	add	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	88 0f       	add	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	82 1b       	sub	r24, r18
 a2e:	93 0b       	sbc	r25, r19
 a30:	8e 57       	subi	r24, 0x7E	; 126
 a32:	9f 4f       	sbci	r25, 0xFF	; 255
 a34:	fc 01       	movw	r30, r24
 a36:	80 81       	ld	r24, Z
 a38:	91 81       	ldd	r25, Z+1	; 0x01
 a3a:	00 97       	sbiw	r24, 0x00	; 0
 a3c:	01 f5       	brne	.+64     	; 0xa7e <schedule+0x1d2>
				tasks[i].ready++;
 a3e:	29 81       	ldd	r18, Y+1	; 0x01
 a40:	3a 81       	ldd	r19, Y+2	; 0x02
 a42:	c9 01       	movw	r24, r18
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	88 0f       	add	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	88 0f       	add	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	82 1b       	sub	r24, r18
 a52:	93 0b       	sbc	r25, r19
 a54:	8c 57       	subi	r24, 0x7C	; 124
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	fc 01       	movw	r30, r24
 a5a:	80 81       	ld	r24, Z
 a5c:	48 2f       	mov	r20, r24
 a5e:	4f 5f       	subi	r20, 0xFF	; 255
 a60:	29 81       	ldd	r18, Y+1	; 0x01
 a62:	3a 81       	ldd	r19, Y+2	; 0x02
 a64:	c9 01       	movw	r24, r18
 a66:	88 0f       	add	r24, r24
 a68:	99 1f       	adc	r25, r25
 a6a:	88 0f       	add	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	88 0f       	add	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	82 1b       	sub	r24, r18
 a74:	93 0b       	sbc	r25, r19
 a76:	8c 57       	subi	r24, 0x7C	; 124
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	fc 01       	movw	r30, r24
 a7c:	40 83       	st	Z, r20
}

//wykonywana w przerwaniu
void schedule(){
	//int i = 0;
	for(int i = 0; i < MAX_TASKS; i++){
 a7e:	89 81       	ldd	r24, Y+1	; 0x01
 a80:	9a 81       	ldd	r25, Y+2	; 0x02
 a82:	01 96       	adiw	r24, 0x01	; 1
 a84:	9a 83       	std	Y+2, r25	; 0x02
 a86:	89 83       	std	Y+1, r24	; 0x01
 a88:	89 81       	ldd	r24, Y+1	; 0x01
 a8a:	9a 81       	ldd	r25, Y+2	; 0x02
 a8c:	8a 30       	cpi	r24, 0x0A	; 10
 a8e:	91 05       	cpc	r25, r1
 a90:	0c f4       	brge	.+2      	; 0xa94 <schedule+0x1e8>
 a92:	14 cf       	rjmp	.-472    	; 0x8bc <schedule+0x10>
			else if(tasks[i].ToGo == 0 && tasks[i].Interval == 0){
				tasks[i].ready++;
			}
		}
	}
}
 a94:	0f 90       	pop	r0
 a96:	0f 90       	pop	r0
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	08 95       	ret

00000a9e <execute>:

void execute(){
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	00 d0       	rcall	.+0      	; 0xaa4 <execute+0x6>
 aa4:	cd b7       	in	r28, 0x3d	; 61
 aa6:	de b7       	in	r29, 0x3e	; 62
	for(int i=0; i < MAX_TASKS; i++){
 aa8:	1a 82       	std	Y+2, r1	; 0x02
 aaa:	19 82       	std	Y+1, r1	; 0x01
 aac:	9d c0       	rjmp	.+314    	; 0xbe8 <execute+0x14a>
		if(tasks[i].ready > 0){
 aae:	29 81       	ldd	r18, Y+1	; 0x01
 ab0:	3a 81       	ldd	r19, Y+2	; 0x02
 ab2:	c9 01       	movw	r24, r18
 ab4:	88 0f       	add	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	82 1b       	sub	r24, r18
 ac2:	93 0b       	sbc	r25, r19
 ac4:	8c 57       	subi	r24, 0x7C	; 124
 ac6:	9f 4f       	sbci	r25, 0xFF	; 255
 ac8:	fc 01       	movw	r30, r24
 aca:	80 81       	ld	r24, Z
 acc:	88 23       	and	r24, r24
 ace:	09 f4       	brne	.+2      	; 0xad2 <execute+0x34>
 ad0:	86 c0       	rjmp	.+268    	; 0xbde <execute+0x140>
			tasks[i].t();
 ad2:	29 81       	ldd	r18, Y+1	; 0x01
 ad4:	3a 81       	ldd	r19, Y+2	; 0x02
 ad6:	c9 01       	movw	r24, r18
 ad8:	88 0f       	add	r24, r24
 ada:	99 1f       	adc	r25, r25
 adc:	88 0f       	add	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	88 0f       	add	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	82 1b       	sub	r24, r18
 ae6:	93 0b       	sbc	r25, r19
 ae8:	82 58       	subi	r24, 0x82	; 130
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	fc 01       	movw	r30, r24
 aee:	80 81       	ld	r24, Z
 af0:	91 81       	ldd	r25, Z+1	; 0x01
 af2:	fc 01       	movw	r30, r24
 af4:	09 95       	icall
			tasks[i].ready--;
 af6:	29 81       	ldd	r18, Y+1	; 0x01
 af8:	3a 81       	ldd	r19, Y+2	; 0x02
 afa:	c9 01       	movw	r24, r18
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	88 0f       	add	r24, r24
 b02:	99 1f       	adc	r25, r25
 b04:	88 0f       	add	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	82 1b       	sub	r24, r18
 b0a:	93 0b       	sbc	r25, r19
 b0c:	8c 57       	subi	r24, 0x7C	; 124
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	fc 01       	movw	r30, r24
 b12:	80 81       	ld	r24, Z
 b14:	48 2f       	mov	r20, r24
 b16:	41 50       	subi	r20, 0x01	; 1
 b18:	29 81       	ldd	r18, Y+1	; 0x01
 b1a:	3a 81       	ldd	r19, Y+2	; 0x02
 b1c:	c9 01       	movw	r24, r18
 b1e:	88 0f       	add	r24, r24
 b20:	99 1f       	adc	r25, r25
 b22:	88 0f       	add	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	88 0f       	add	r24, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	82 1b       	sub	r24, r18
 b2c:	93 0b       	sbc	r25, r19
 b2e:	8c 57       	subi	r24, 0x7C	; 124
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	fc 01       	movw	r30, r24
 b34:	40 83       	st	Z, r20
			//usuwanie taska jesli zostal wykonany i nie jest periodyczny
			if(tasks[i].ready == 0 && tasks[i].Interval == 0){
 b36:	29 81       	ldd	r18, Y+1	; 0x01
 b38:	3a 81       	ldd	r19, Y+2	; 0x02
 b3a:	c9 01       	movw	r24, r18
 b3c:	88 0f       	add	r24, r24
 b3e:	99 1f       	adc	r25, r25
 b40:	88 0f       	add	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	88 0f       	add	r24, r24
 b46:	99 1f       	adc	r25, r25
 b48:	82 1b       	sub	r24, r18
 b4a:	93 0b       	sbc	r25, r19
 b4c:	8c 57       	subi	r24, 0x7C	; 124
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	fc 01       	movw	r30, r24
 b52:	80 81       	ld	r24, Z
 b54:	88 23       	and	r24, r24
 b56:	09 f0       	breq	.+2      	; 0xb5a <execute+0xbc>
 b58:	42 c0       	rjmp	.+132    	; 0xbde <execute+0x140>
 b5a:	29 81       	ldd	r18, Y+1	; 0x01
 b5c:	3a 81       	ldd	r19, Y+2	; 0x02
 b5e:	c9 01       	movw	r24, r18
 b60:	88 0f       	add	r24, r24
 b62:	99 1f       	adc	r25, r25
 b64:	88 0f       	add	r24, r24
 b66:	99 1f       	adc	r25, r25
 b68:	88 0f       	add	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	82 1b       	sub	r24, r18
 b6e:	93 0b       	sbc	r25, r19
 b70:	8e 57       	subi	r24, 0x7E	; 126
 b72:	9f 4f       	sbci	r25, 0xFF	; 255
 b74:	fc 01       	movw	r30, r24
 b76:	80 81       	ld	r24, Z
 b78:	91 81       	ldd	r25, Z+1	; 0x01
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	81 f5       	brne	.+96     	; 0xbde <execute+0x140>
				tasks[i].Interval = 0;
 b7e:	29 81       	ldd	r18, Y+1	; 0x01
 b80:	3a 81       	ldd	r19, Y+2	; 0x02
 b82:	c9 01       	movw	r24, r18
 b84:	88 0f       	add	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	88 0f       	add	r24, r24
 b8a:	99 1f       	adc	r25, r25
 b8c:	88 0f       	add	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	82 1b       	sub	r24, r18
 b92:	93 0b       	sbc	r25, r19
 b94:	8e 57       	subi	r24, 0x7E	; 126
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	fc 01       	movw	r30, r24
 b9a:	11 82       	std	Z+1, r1	; 0x01
 b9c:	10 82       	st	Z, r1
				tasks[i].ToGo = 0;
 b9e:	29 81       	ldd	r18, Y+1	; 0x01
 ba0:	3a 81       	ldd	r19, Y+2	; 0x02
 ba2:	c9 01       	movw	r24, r18
 ba4:	88 0f       	add	r24, r24
 ba6:	99 1f       	adc	r25, r25
 ba8:	88 0f       	add	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	88 0f       	add	r24, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	82 1b       	sub	r24, r18
 bb2:	93 0b       	sbc	r25, r19
 bb4:	80 58       	subi	r24, 0x80	; 128
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	fc 01       	movw	r30, r24
 bba:	11 82       	std	Z+1, r1	; 0x01
 bbc:	10 82       	st	Z, r1
				tasks[i].t = 0;
 bbe:	29 81       	ldd	r18, Y+1	; 0x01
 bc0:	3a 81       	ldd	r19, Y+2	; 0x02
 bc2:	c9 01       	movw	r24, r18
 bc4:	88 0f       	add	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	88 0f       	add	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	88 0f       	add	r24, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	82 1b       	sub	r24, r18
 bd2:	93 0b       	sbc	r25, r19
 bd4:	82 58       	subi	r24, 0x82	; 130
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	fc 01       	movw	r30, r24
 bda:	11 82       	std	Z+1, r1	; 0x01
 bdc:	10 82       	st	Z, r1
		}
	}
}

void execute(){
	for(int i=0; i < MAX_TASKS; i++){
 bde:	89 81       	ldd	r24, Y+1	; 0x01
 be0:	9a 81       	ldd	r25, Y+2	; 0x02
 be2:	01 96       	adiw	r24, 0x01	; 1
 be4:	9a 83       	std	Y+2, r25	; 0x02
 be6:	89 83       	std	Y+1, r24	; 0x01
 be8:	89 81       	ldd	r24, Y+1	; 0x01
 bea:	9a 81       	ldd	r25, Y+2	; 0x02
 bec:	8a 30       	cpi	r24, 0x0A	; 10
 bee:	91 05       	cpc	r25, r1
 bf0:	0c f4       	brge	.+2      	; 0xbf4 <execute+0x156>
 bf2:	5d cf       	rjmp	.-326    	; 0xaae <execute+0x10>
				tasks[i].ToGo = 0;
				tasks[i].t = 0;
			}
		}
	}
}
 bf4:	0f 90       	pop	r0
 bf6:	0f 90       	pop	r0
 bf8:	df 91       	pop	r29
 bfa:	cf 91       	pop	r28
 bfc:	08 95       	ret

00000bfe <__vector_10>:


ISR(TIMER0_COMP_vect){
 bfe:	1f 92       	push	r1
 c00:	0f 92       	push	r0
 c02:	00 90 5f 00 	lds	r0, 0x005F
 c06:	0f 92       	push	r0
 c08:	11 24       	eor	r1, r1
 c0a:	2f 93       	push	r18
 c0c:	3f 93       	push	r19
 c0e:	4f 93       	push	r20
 c10:	5f 93       	push	r21
 c12:	6f 93       	push	r22
 c14:	7f 93       	push	r23
 c16:	8f 93       	push	r24
 c18:	9f 93       	push	r25
 c1a:	af 93       	push	r26
 c1c:	bf 93       	push	r27
 c1e:	ef 93       	push	r30
 c20:	ff 93       	push	r31
 c22:	cf 93       	push	r28
 c24:	df 93       	push	r29
 c26:	cd b7       	in	r28, 0x3d	; 61
 c28:	de b7       	in	r29, 0x3e	; 62
	schedule();
 c2a:	0e 94 56 04 	call	0x8ac	; 0x8ac <schedule>
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	ff 91       	pop	r31
 c34:	ef 91       	pop	r30
 c36:	bf 91       	pop	r27
 c38:	af 91       	pop	r26
 c3a:	9f 91       	pop	r25
 c3c:	8f 91       	pop	r24
 c3e:	7f 91       	pop	r23
 c40:	6f 91       	pop	r22
 c42:	5f 91       	pop	r21
 c44:	4f 91       	pop	r20
 c46:	3f 91       	pop	r19
 c48:	2f 91       	pop	r18
 c4a:	0f 90       	pop	r0
 c4c:	00 92 5f 00 	sts	0x005F, r0
 c50:	0f 90       	pop	r0
 c52:	1f 90       	pop	r1
 c54:	18 95       	reti

00000c56 <__divmodhi4>:
 c56:	97 fb       	bst	r25, 7
 c58:	07 2e       	mov	r0, r23
 c5a:	16 f4       	brtc	.+4      	; 0xc60 <__divmodhi4+0xa>
 c5c:	00 94       	com	r0
 c5e:	07 d0       	rcall	.+14     	; 0xc6e <__divmodhi4_neg1>
 c60:	77 fd       	sbrc	r23, 7
 c62:	09 d0       	rcall	.+18     	; 0xc76 <__divmodhi4_neg2>
 c64:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__udivmodhi4>
 c68:	07 fc       	sbrc	r0, 7
 c6a:	05 d0       	rcall	.+10     	; 0xc76 <__divmodhi4_neg2>
 c6c:	3e f4       	brtc	.+14     	; 0xc7c <__divmodhi4_exit>

00000c6e <__divmodhi4_neg1>:
 c6e:	90 95       	com	r25
 c70:	81 95       	neg	r24
 c72:	9f 4f       	sbci	r25, 0xFF	; 255
 c74:	08 95       	ret

00000c76 <__divmodhi4_neg2>:
 c76:	70 95       	com	r23
 c78:	61 95       	neg	r22
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c7c <__divmodhi4_exit>:
 c7c:	08 95       	ret

00000c7e <__udivmodhi4>:
 c7e:	aa 1b       	sub	r26, r26
 c80:	bb 1b       	sub	r27, r27
 c82:	51 e1       	ldi	r21, 0x11	; 17
 c84:	07 c0       	rjmp	.+14     	; 0xc94 <__udivmodhi4_ep>

00000c86 <__udivmodhi4_loop>:
 c86:	aa 1f       	adc	r26, r26
 c88:	bb 1f       	adc	r27, r27
 c8a:	a6 17       	cp	r26, r22
 c8c:	b7 07       	cpc	r27, r23
 c8e:	10 f0       	brcs	.+4      	; 0xc94 <__udivmodhi4_ep>
 c90:	a6 1b       	sub	r26, r22
 c92:	b7 0b       	sbc	r27, r23

00000c94 <__udivmodhi4_ep>:
 c94:	88 1f       	adc	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	5a 95       	dec	r21
 c9a:	a9 f7       	brne	.-22     	; 0xc86 <__udivmodhi4_loop>
 c9c:	80 95       	com	r24
 c9e:	90 95       	com	r25
 ca0:	bc 01       	movw	r22, r24
 ca2:	cd 01       	movw	r24, r26
 ca4:	08 95       	ret

00000ca6 <_exit>:
 ca6:	f8 94       	cli

00000ca8 <__stop_program>:
 ca8:	ff cf       	rjmp	.-2      	; 0xca8 <__stop_program>
